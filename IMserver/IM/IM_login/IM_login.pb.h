// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM_login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_5flogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_5flogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_5flogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_5flogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IM_5flogin_2eproto;
class AddRequest;
class AddRequestDefaultTypeInternal;
extern AddRequestDefaultTypeInternal _AddRequest_default_instance_;
class AddRespond;
class AddRespondDefaultTypeInternal;
extern AddRespondDefaultTypeInternal _AddRespond_default_instance_;
class ApplyInfo;
class ApplyInfoDefaultTypeInternal;
extern ApplyInfoDefaultTypeInternal _ApplyInfo_default_instance_;
class ApplyRequest;
class ApplyRequestDefaultTypeInternal;
extern ApplyRequestDefaultTypeInternal _ApplyRequest_default_instance_;
class ApplyRespond;
class ApplyRespondDefaultTypeInternal;
extern ApplyRespondDefaultTypeInternal _ApplyRespond_default_instance_;
class ClientId;
class ClientIdDefaultTypeInternal;
extern ClientIdDefaultTypeInternal _ClientId_default_instance_;
class CommunicationRequest;
class CommunicationRequestDefaultTypeInternal;
extern CommunicationRequestDefaultTypeInternal _CommunicationRequest_default_instance_;
class CommunicationRespond;
class CommunicationRespondDefaultTypeInternal;
extern CommunicationRespondDefaultTypeInternal _CommunicationRespond_default_instance_;
class FriendApply;
class FriendApplyDefaultTypeInternal;
extern FriendApplyDefaultTypeInternal _FriendApply_default_instance_;
class FriendListRequest;
class FriendListRequestDefaultTypeInternal;
extern FriendListRequestDefaultTypeInternal _FriendListRequest_default_instance_;
class FriendListRespond;
class FriendListRespondDefaultTypeInternal;
extern FriendListRespondDefaultTypeInternal _FriendListRespond_default_instance_;
class GetImageRequest;
class GetImageRequestDefaultTypeInternal;
extern GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
class GetImageRespond;
class GetImageRespondDefaultTypeInternal;
extern GetImageRespondDefaultTypeInternal _GetImageRespond_default_instance_;
class LoginARegisterRespond;
class LoginARegisterRespondDefaultTypeInternal;
extern LoginARegisterRespondDefaultTypeInternal _LoginARegisterRespond_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class PullRequest;
class PullRequestDefaultTypeInternal;
extern PullRequestDefaultTypeInternal _PullRequest_default_instance_;
class PullRespond;
class PullRespondDefaultTypeInternal;
extern PullRespondDefaultTypeInternal _PullRespond_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class SearchInfo;
class SearchInfoDefaultTypeInternal;
extern SearchInfoDefaultTypeInternal _SearchInfo_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchRespond;
class SearchRespondDefaultTypeInternal;
extern SearchRespondDefaultTypeInternal _SearchRespond_default_instance_;
class ServerMsg;
class ServerMsgDefaultTypeInternal;
extern ServerMsgDefaultTypeInternal _ServerMsg_default_instance_;
class UpdateImaRequest;
class UpdateImaRequestDefaultTypeInternal;
extern UpdateImaRequestDefaultTypeInternal _UpdateImaRequest_default_instance_;
class UpdateImaRespond;
class UpdateImaRespondDefaultTypeInternal;
extern UpdateImaRespondDefaultTypeInternal _UpdateImaRespond_default_instance_;
class UpdateRelationship;
class UpdateRelationshipDefaultTypeInternal;
extern UpdateRelationshipDefaultTypeInternal _UpdateRelationship_default_instance_;
class UserInfoRequest;
class UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserInfoRespond;
class UserInfoRespondDefaultTypeInternal;
extern UserInfoRespondDefaultTypeInternal _UserInfoRespond_default_instance_;
class addImageRequest;
class addImageRequestDefaultTypeInternal;
extern addImageRequestDefaultTypeInternal _addImageRequest_default_instance_;
class addImageRespond;
class addImageRespondDefaultTypeInternal;
extern addImageRespondDefaultTypeInternal _addImageRespond_default_instance_;
class deleteFriendRequest;
class deleteFriendRequestDefaultTypeInternal;
extern deleteFriendRequestDefaultTypeInternal _deleteFriendRequest_default_instance_;
class deleteFriendRespond;
class deleteFriendRespondDefaultTypeInternal;
extern deleteFriendRespondDefaultTypeInternal _deleteFriendRespond_default_instance_;
class friendAdd;
class friendAddDefaultTypeInternal;
extern friendAddDefaultTypeInternal _friendAdd_default_instance_;
class heartCheck;
class heartCheckDefaultTypeInternal;
extern heartCheckDefaultTypeInternal _heartCheck_default_instance_;
class offlineMsgRequest;
class offlineMsgRequestDefaultTypeInternal;
extern offlineMsgRequestDefaultTypeInternal _offlineMsgRequest_default_instance_;
class offlineMsgRespond;
class offlineMsgRespondDefaultTypeInternal;
extern offlineMsgRespondDefaultTypeInternal _offlineMsgRespond_default_instance_;
class offline_info;
class offline_infoDefaultTypeInternal;
extern offline_infoDefaultTypeInternal _offline_info_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddRequest* Arena::CreateMaybeMessage<::AddRequest>(Arena*);
template<> ::AddRespond* Arena::CreateMaybeMessage<::AddRespond>(Arena*);
template<> ::ApplyInfo* Arena::CreateMaybeMessage<::ApplyInfo>(Arena*);
template<> ::ApplyRequest* Arena::CreateMaybeMessage<::ApplyRequest>(Arena*);
template<> ::ApplyRespond* Arena::CreateMaybeMessage<::ApplyRespond>(Arena*);
template<> ::ClientId* Arena::CreateMaybeMessage<::ClientId>(Arena*);
template<> ::CommunicationRequest* Arena::CreateMaybeMessage<::CommunicationRequest>(Arena*);
template<> ::CommunicationRespond* Arena::CreateMaybeMessage<::CommunicationRespond>(Arena*);
template<> ::FriendApply* Arena::CreateMaybeMessage<::FriendApply>(Arena*);
template<> ::FriendListRequest* Arena::CreateMaybeMessage<::FriendListRequest>(Arena*);
template<> ::FriendListRespond* Arena::CreateMaybeMessage<::FriendListRespond>(Arena*);
template<> ::GetImageRequest* Arena::CreateMaybeMessage<::GetImageRequest>(Arena*);
template<> ::GetImageRespond* Arena::CreateMaybeMessage<::GetImageRespond>(Arena*);
template<> ::LoginARegisterRespond* Arena::CreateMaybeMessage<::LoginARegisterRespond>(Arena*);
template<> ::LoginRequest* Arena::CreateMaybeMessage<::LoginRequest>(Arena*);
template<> ::PullRequest* Arena::CreateMaybeMessage<::PullRequest>(Arena*);
template<> ::PullRespond* Arena::CreateMaybeMessage<::PullRespond>(Arena*);
template<> ::RegisterRequest* Arena::CreateMaybeMessage<::RegisterRequest>(Arena*);
template<> ::SearchInfo* Arena::CreateMaybeMessage<::SearchInfo>(Arena*);
template<> ::SearchRequest* Arena::CreateMaybeMessage<::SearchRequest>(Arena*);
template<> ::SearchRespond* Arena::CreateMaybeMessage<::SearchRespond>(Arena*);
template<> ::ServerMsg* Arena::CreateMaybeMessage<::ServerMsg>(Arena*);
template<> ::UpdateImaRequest* Arena::CreateMaybeMessage<::UpdateImaRequest>(Arena*);
template<> ::UpdateImaRespond* Arena::CreateMaybeMessage<::UpdateImaRespond>(Arena*);
template<> ::UpdateRelationship* Arena::CreateMaybeMessage<::UpdateRelationship>(Arena*);
template<> ::UserInfoRequest* Arena::CreateMaybeMessage<::UserInfoRequest>(Arena*);
template<> ::UserInfoRespond* Arena::CreateMaybeMessage<::UserInfoRespond>(Arena*);
template<> ::addImageRequest* Arena::CreateMaybeMessage<::addImageRequest>(Arena*);
template<> ::addImageRespond* Arena::CreateMaybeMessage<::addImageRespond>(Arena*);
template<> ::deleteFriendRequest* Arena::CreateMaybeMessage<::deleteFriendRequest>(Arena*);
template<> ::deleteFriendRespond* Arena::CreateMaybeMessage<::deleteFriendRespond>(Arena*);
template<> ::friendAdd* Arena::CreateMaybeMessage<::friendAdd>(Arena*);
template<> ::heartCheck* Arena::CreateMaybeMessage<::heartCheck>(Arena*);
template<> ::offlineMsgRequest* Arena::CreateMaybeMessage<::offlineMsgRequest>(Arena*);
template<> ::offlineMsgRespond* Arena::CreateMaybeMessage<::offlineMsgRespond>(Arena*);
template<> ::offline_info* Arena::CreateMaybeMessage<::offline_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SearchRequest_State : int {
  SearchRequest_State_FRIEND = 0,
  SearchRequest_State_GROUD = 1,
  SearchRequest_State_SearchRequest_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SearchRequest_State_SearchRequest_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SearchRequest_State_IsValid(int value);
constexpr SearchRequest_State SearchRequest_State_State_MIN = SearchRequest_State_FRIEND;
constexpr SearchRequest_State SearchRequest_State_State_MAX = SearchRequest_State_GROUD;
constexpr int SearchRequest_State_State_ARRAYSIZE = SearchRequest_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SearchRequest_State_descriptor();
template<typename T>
inline const std::string& SearchRequest_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SearchRequest_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SearchRequest_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SearchRequest_State_descriptor(), enum_t_value);
}
inline bool SearchRequest_State_Parse(
    const std::string& name, SearchRequest_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SearchRequest_State>(
    SearchRequest_State_descriptor(), name, value);
}
enum SearchRequest_Way : int {
  SearchRequest_Way_BY_ACCOUNT = 0,
  SearchRequest_Way_BY_NAME = 1,
  SearchRequest_Way_SearchRequest_Way_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SearchRequest_Way_SearchRequest_Way_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SearchRequest_Way_IsValid(int value);
constexpr SearchRequest_Way SearchRequest_Way_Way_MIN = SearchRequest_Way_BY_ACCOUNT;
constexpr SearchRequest_Way SearchRequest_Way_Way_MAX = SearchRequest_Way_BY_NAME;
constexpr int SearchRequest_Way_Way_ARRAYSIZE = SearchRequest_Way_Way_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SearchRequest_Way_descriptor();
template<typename T>
inline const std::string& SearchRequest_Way_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SearchRequest_Way>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SearchRequest_Way_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SearchRequest_Way_descriptor(), enum_t_value);
}
inline bool SearchRequest_Way_Parse(
    const std::string& name, SearchRequest_Way* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SearchRequest_Way>(
    SearchRequest_Way_descriptor(), name, value);
}
enum AddRequest_State : int {
  AddRequest_State_FRIEND = 0,
  AddRequest_State_GROUP = 1,
  AddRequest_State_AddRequest_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AddRequest_State_AddRequest_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AddRequest_State_IsValid(int value);
constexpr AddRequest_State AddRequest_State_State_MIN = AddRequest_State_FRIEND;
constexpr AddRequest_State AddRequest_State_State_MAX = AddRequest_State_GROUP;
constexpr int AddRequest_State_State_ARRAYSIZE = AddRequest_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddRequest_State_descriptor();
template<typename T>
inline const std::string& AddRequest_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddRequest_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddRequest_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddRequest_State_descriptor(), enum_t_value);
}
inline bool AddRequest_State_Parse(
    const std::string& name, AddRequest_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddRequest_State>(
    AddRequest_State_descriptor(), name, value);
}
// ===================================================================

class ClientId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientId) */ {
 public:
  inline ClientId() : ClientId(nullptr) {};
  virtual ~ClientId();

  ClientId(const ClientId& from);
  ClientId(ClientId&& from) noexcept
    : ClientId() {
    *this = ::std::move(from);
  }

  inline ClientId& operator=(const ClientId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientId& operator=(ClientId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientId* internal_default_instance() {
    return reinterpret_cast<const ClientId*>(
               &_ClientId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientId& a, ClientId& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientId* New() const final {
    return CreateMaybeMessage<ClientId>(nullptr);
  }

  ClientId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientId& from);
  void MergeFrom(const ClientId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientId";
  }
  protected:
  explicit ClientId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:ClientId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {};
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account(
      std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {};
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {};
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SearchRequest_State State;
  static constexpr State FRIEND =
    SearchRequest_State_FRIEND;
  static constexpr State GROUD =
    SearchRequest_State_GROUD;
  static inline bool State_IsValid(int value) {
    return SearchRequest_State_IsValid(value);
  }
  static constexpr State State_MIN =
    SearchRequest_State_State_MIN;
  static constexpr State State_MAX =
    SearchRequest_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    SearchRequest_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return SearchRequest_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return SearchRequest_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return SearchRequest_State_Parse(name, value);
  }

  typedef SearchRequest_Way Way;
  static constexpr Way BY_ACCOUNT =
    SearchRequest_Way_BY_ACCOUNT;
  static constexpr Way BY_NAME =
    SearchRequest_Way_BY_NAME;
  static inline bool Way_IsValid(int value) {
    return SearchRequest_Way_IsValid(value);
  }
  static constexpr Way Way_MIN =
    SearchRequest_Way_Way_MIN;
  static constexpr Way Way_MAX =
    SearchRequest_Way_Way_MAX;
  static constexpr int Way_ARRAYSIZE =
    SearchRequest_Way_Way_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Way_descriptor() {
    return SearchRequest_Way_descriptor();
  }
  template<typename T>
  static inline const std::string& Way_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Way>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Way_Name.");
    return SearchRequest_Way_Name(enum_t_value);
  }
  static inline bool Way_Parse(const std::string& name,
      Way* value) {
    return SearchRequest_Way_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kStFieldNumber = 1,
    kWayFieldNumber = 2,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .SearchRequest.State st = 1;
  void clear_st();
  ::SearchRequest_State st() const;
  void set_st(::SearchRequest_State value);
  private:
  ::SearchRequest_State _internal_st() const;
  void _internal_set_st(::SearchRequest_State value);
  public:

  // .SearchRequest.Way way = 2;
  void clear_way();
  ::SearchRequest_Way way() const;
  void set_way(::SearchRequest_Way value);
  private:
  ::SearchRequest_Way _internal_way() const;
  void _internal_set_way(::SearchRequest_Way value);
  public:

  // @@protoc_insertion_point(class_scope:SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int st_;
  int way_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class AddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddRequest) */ {
 public:
  inline AddRequest() : AddRequest(nullptr) {};
  virtual ~AddRequest();

  AddRequest(const AddRequest& from);
  AddRequest(AddRequest&& from) noexcept
    : AddRequest() {
    *this = ::std::move(from);
  }

  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRequest& operator=(AddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRequest* internal_default_instance() {
    return reinterpret_cast<const AddRequest*>(
               &_AddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddRequest& a, AddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRequest* New() const final {
    return CreateMaybeMessage<AddRequest>(nullptr);
  }

  AddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRequest& from);
  void MergeFrom(const AddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddRequest";
  }
  protected:
  explicit AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AddRequest_State State;
  static constexpr State FRIEND =
    AddRequest_State_FRIEND;
  static constexpr State GROUP =
    AddRequest_State_GROUP;
  static inline bool State_IsValid(int value) {
    return AddRequest_State_IsValid(value);
  }
  static constexpr State State_MIN =
    AddRequest_State_State_MIN;
  static constexpr State State_MAX =
    AddRequest_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    AddRequest_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return AddRequest_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return AddRequest_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return AddRequest_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kFriendIdFieldNumber = 3,
    kStFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 3;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_friend_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_friend_id(
      std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // .AddRequest.State st = 1;
  void clear_st();
  ::AddRequest_State st() const;
  void set_st(::AddRequest_State value);
  private:
  ::AddRequest_State _internal_st() const;
  void _internal_set_st(::AddRequest_State value);
  public:

  // @@protoc_insertion_point(class_scope:AddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  int st_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ApplyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ApplyRequest) */ {
 public:
  inline ApplyRequest() : ApplyRequest(nullptr) {};
  virtual ~ApplyRequest();

  ApplyRequest(const ApplyRequest& from);
  ApplyRequest(ApplyRequest&& from) noexcept
    : ApplyRequest() {
    *this = ::std::move(from);
  }

  inline ApplyRequest& operator=(const ApplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyRequest& operator=(ApplyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyRequest* internal_default_instance() {
    return reinterpret_cast<const ApplyRequest*>(
               &_ApplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ApplyRequest& a, ApplyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyRequest* New() const final {
    return CreateMaybeMessage<ApplyRequest>(nullptr);
  }

  ApplyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyRequest& from);
  void MergeFrom(const ApplyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ApplyRequest";
  }
  protected:
  explicit ApplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:ApplyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class UpdateRelationship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateRelationship) */ {
 public:
  inline UpdateRelationship() : UpdateRelationship(nullptr) {};
  virtual ~UpdateRelationship();

  UpdateRelationship(const UpdateRelationship& from);
  UpdateRelationship(UpdateRelationship&& from) noexcept
    : UpdateRelationship() {
    *this = ::std::move(from);
  }

  inline UpdateRelationship& operator=(const UpdateRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRelationship& operator=(UpdateRelationship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRelationship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRelationship* internal_default_instance() {
    return reinterpret_cast<const UpdateRelationship*>(
               &_UpdateRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateRelationship& a, UpdateRelationship& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRelationship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRelationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRelationship* New() const final {
    return CreateMaybeMessage<UpdateRelationship>(nullptr);
  }

  UpdateRelationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRelationship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRelationship& from);
  void MergeFrom(const UpdateRelationship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRelationship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateRelationship";
  }
  protected:
  explicit UpdateRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_friend_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_friend_id(
      std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // bool result = 3;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UpdateRelationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoRequest) */ {
 public:
  inline UserInfoRequest() : UserInfoRequest(nullptr) {};
  virtual ~UserInfoRequest();

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRequest* New() const final {
    return CreateMaybeMessage<UserInfoRequest>(nullptr);
  }

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoRequest& from);
  void MergeFrom(const UserInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoRequest";
  }
  protected:
  explicit UserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:UserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class FriendListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendListRequest) */ {
 public:
  inline FriendListRequest() : FriendListRequest(nullptr) {};
  virtual ~FriendListRequest();

  FriendListRequest(const FriendListRequest& from);
  FriendListRequest(FriendListRequest&& from) noexcept
    : FriendListRequest() {
    *this = ::std::move(from);
  }

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListRequest& operator=(FriendListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListRequest* internal_default_instance() {
    return reinterpret_cast<const FriendListRequest*>(
               &_FriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FriendListRequest& a, FriendListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendListRequest* New() const final {
    return CreateMaybeMessage<FriendListRequest>(nullptr);
  }

  FriendListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendListRequest& from);
  void MergeFrom(const FriendListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendListRequest";
  }
  protected:
  explicit FriendListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:FriendListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class addImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:addImageRequest) */ {
 public:
  inline addImageRequest() : addImageRequest(nullptr) {};
  virtual ~addImageRequest();

  addImageRequest(const addImageRequest& from);
  addImageRequest(addImageRequest&& from) noexcept
    : addImageRequest() {
    *this = ::std::move(from);
  }

  inline addImageRequest& operator=(const addImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addImageRequest& operator=(addImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addImageRequest* internal_default_instance() {
    return reinterpret_cast<const addImageRequest*>(
               &_addImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(addImageRequest& a, addImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addImageRequest* New() const final {
    return CreateMaybeMessage<addImageRequest>(nullptr);
  }

  addImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addImageRequest& from);
  void MergeFrom(const addImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "addImageRequest";
  }
  protected:
  explicit addImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
    kImgDataFieldNumber = 2,
  };
  // string md5 = 1;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_md5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_md5(
      std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // bytes img_data = 2;
  void clear_img_data();
  const std::string& img_data() const;
  void set_img_data(const std::string& value);
  void set_img_data(std::string&& value);
  void set_img_data(const char* value);
  void set_img_data(const void* value, size_t size);
  std::string* mutable_img_data();
  std::string* release_img_data();
  void set_allocated_img_data(std::string* img_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_img_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_img_data(
      std::string* img_data);
  private:
  const std::string& _internal_img_data() const;
  void _internal_set_img_data(const std::string& value);
  std::string* _internal_mutable_img_data();
  public:

  // @@protoc_insertion_point(class_scope:addImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class GetImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetImageRequest) */ {
 public:
  inline GetImageRequest() : GetImageRequest(nullptr) {};
  virtual ~GetImageRequest();

  GetImageRequest(const GetImageRequest& from);
  GetImageRequest(GetImageRequest&& from) noexcept
    : GetImageRequest() {
    *this = ::std::move(from);
  }

  inline GetImageRequest& operator=(const GetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageRequest& operator=(GetImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageRequest* internal_default_instance() {
    return reinterpret_cast<const GetImageRequest*>(
               &_GetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetImageRequest& a, GetImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageRequest* New() const final {
    return CreateMaybeMessage<GetImageRequest>(nullptr);
  }

  GetImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageRequest& from);
  void MergeFrom(const GetImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetImageRequest";
  }
  protected:
  explicit GetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
  };
  // string md5 = 1;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_md5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_md5(
      std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // @@protoc_insertion_point(class_scope:GetImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class deleteFriendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deleteFriendRequest) */ {
 public:
  inline deleteFriendRequest() : deleteFriendRequest(nullptr) {};
  virtual ~deleteFriendRequest();

  deleteFriendRequest(const deleteFriendRequest& from);
  deleteFriendRequest(deleteFriendRequest&& from) noexcept
    : deleteFriendRequest() {
    *this = ::std::move(from);
  }

  inline deleteFriendRequest& operator=(const deleteFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteFriendRequest& operator=(deleteFriendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const deleteFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteFriendRequest* internal_default_instance() {
    return reinterpret_cast<const deleteFriendRequest*>(
               &_deleteFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(deleteFriendRequest& a, deleteFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteFriendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline deleteFriendRequest* New() const final {
    return CreateMaybeMessage<deleteFriendRequest>(nullptr);
  }

  deleteFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<deleteFriendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const deleteFriendRequest& from);
  void MergeFrom(const deleteFriendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteFriendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deleteFriendRequest";
  }
  protected:
  explicit deleteFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurFieldNumber = 1,
    kTarFieldNumber = 2,
  };
  // string cur = 1;
  void clear_cur();
  const std::string& cur() const;
  void set_cur(const std::string& value);
  void set_cur(std::string&& value);
  void set_cur(const char* value);
  void set_cur(const char* value, size_t size);
  std::string* mutable_cur();
  std::string* release_cur();
  void set_allocated_cur(std::string* cur);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cur();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cur(
      std::string* cur);
  private:
  const std::string& _internal_cur() const;
  void _internal_set_cur(const std::string& value);
  std::string* _internal_mutable_cur();
  public:

  // string tar = 2;
  void clear_tar();
  const std::string& tar() const;
  void set_tar(const std::string& value);
  void set_tar(std::string&& value);
  void set_tar(const char* value);
  void set_tar(const char* value, size_t size);
  std::string* mutable_tar();
  std::string* release_tar();
  void set_allocated_tar(std::string* tar);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tar();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tar(
      std::string* tar);
  private:
  const std::string& _internal_tar() const;
  void _internal_set_tar(const std::string& value);
  std::string* _internal_mutable_tar();
  public:

  // @@protoc_insertion_point(class_scope:deleteFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class PullRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PullRequest) */ {
 public:
  inline PullRequest() : PullRequest(nullptr) {};
  virtual ~PullRequest();

  PullRequest(const PullRequest& from);
  PullRequest(PullRequest&& from) noexcept
    : PullRequest() {
    *this = ::std::move(from);
  }

  inline PullRequest& operator=(const PullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullRequest& operator=(PullRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullRequest& default_instance();

  enum RequestTypeCase {
    kLoginRequest = 1,
    kRegisterRequest = 2,
    kClientId = 3,
    kImaRequest = 4,
    kSearchRequest = 5,
    kAddRequest = 6,
    kApplyRequest = 7,
    kUpdateRela = 8,
    kUserInfo = 9,
    kFriendList = 10,
    kCommunication = 11,
    kOfflineRequest = 12,
    kHeart = 13,
    kImageRequest = 14,
    kAddImage = 15,
    kDeleteFriend = 16,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullRequest* internal_default_instance() {
    return reinterpret_cast<const PullRequest*>(
               &_PullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PullRequest& a, PullRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullRequest* New() const final {
    return CreateMaybeMessage<PullRequest>(nullptr);
  }

  PullRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullRequest& from);
  void MergeFrom(const PullRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PullRequest";
  }
  protected:
  explicit PullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginRequestFieldNumber = 1,
    kRegisterRequestFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kImaRequestFieldNumber = 4,
    kSearchRequestFieldNumber = 5,
    kAddRequestFieldNumber = 6,
    kApplyRequestFieldNumber = 7,
    kUpdateRelaFieldNumber = 8,
    kUserInfoFieldNumber = 9,
    kFriendListFieldNumber = 10,
    kCommunicationFieldNumber = 11,
    kOfflineRequestFieldNumber = 12,
    kHeartFieldNumber = 13,
    kImageRequestFieldNumber = 14,
    kAddImageFieldNumber = 15,
    kDeleteFriendFieldNumber = 16,
  };
  // .LoginRequest login_request = 1;
  bool has_login_request() const;
  private:
  bool _internal_has_login_request() const;
  public:
  void clear_login_request();
  const ::LoginRequest& login_request() const;
  ::LoginRequest* release_login_request();
  ::LoginRequest* mutable_login_request();
  void set_allocated_login_request(::LoginRequest* login_request);
  private:
  const ::LoginRequest& _internal_login_request() const;
  ::LoginRequest* _internal_mutable_login_request();
  public:
  void unsafe_arena_set_allocated_login_request(
      ::LoginRequest* login_request);
  ::LoginRequest* unsafe_arena_release_login_request();

  // .RegisterRequest register_request = 2;
  bool has_register_request() const;
  private:
  bool _internal_has_register_request() const;
  public:
  void clear_register_request();
  const ::RegisterRequest& register_request() const;
  ::RegisterRequest* release_register_request();
  ::RegisterRequest* mutable_register_request();
  void set_allocated_register_request(::RegisterRequest* register_request);
  private:
  const ::RegisterRequest& _internal_register_request() const;
  ::RegisterRequest* _internal_mutable_register_request();
  public:
  void unsafe_arena_set_allocated_register_request(
      ::RegisterRequest* register_request);
  ::RegisterRequest* unsafe_arena_release_register_request();

  // .ClientId client_id = 3;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const ::ClientId& client_id() const;
  ::ClientId* release_client_id();
  ::ClientId* mutable_client_id();
  void set_allocated_client_id(::ClientId* client_id);
  private:
  const ::ClientId& _internal_client_id() const;
  ::ClientId* _internal_mutable_client_id();
  public:
  void unsafe_arena_set_allocated_client_id(
      ::ClientId* client_id);
  ::ClientId* unsafe_arena_release_client_id();

  // .UpdateImaRequest ima_request = 4;
  bool has_ima_request() const;
  private:
  bool _internal_has_ima_request() const;
  public:
  void clear_ima_request();
  const ::UpdateImaRequest& ima_request() const;
  ::UpdateImaRequest* release_ima_request();
  ::UpdateImaRequest* mutable_ima_request();
  void set_allocated_ima_request(::UpdateImaRequest* ima_request);
  private:
  const ::UpdateImaRequest& _internal_ima_request() const;
  ::UpdateImaRequest* _internal_mutable_ima_request();
  public:
  void unsafe_arena_set_allocated_ima_request(
      ::UpdateImaRequest* ima_request);
  ::UpdateImaRequest* unsafe_arena_release_ima_request();

  // .SearchRequest search_request = 5;
  bool has_search_request() const;
  private:
  bool _internal_has_search_request() const;
  public:
  void clear_search_request();
  const ::SearchRequest& search_request() const;
  ::SearchRequest* release_search_request();
  ::SearchRequest* mutable_search_request();
  void set_allocated_search_request(::SearchRequest* search_request);
  private:
  const ::SearchRequest& _internal_search_request() const;
  ::SearchRequest* _internal_mutable_search_request();
  public:
  void unsafe_arena_set_allocated_search_request(
      ::SearchRequest* search_request);
  ::SearchRequest* unsafe_arena_release_search_request();

  // .AddRequest add_request = 6;
  bool has_add_request() const;
  private:
  bool _internal_has_add_request() const;
  public:
  void clear_add_request();
  const ::AddRequest& add_request() const;
  ::AddRequest* release_add_request();
  ::AddRequest* mutable_add_request();
  void set_allocated_add_request(::AddRequest* add_request);
  private:
  const ::AddRequest& _internal_add_request() const;
  ::AddRequest* _internal_mutable_add_request();
  public:
  void unsafe_arena_set_allocated_add_request(
      ::AddRequest* add_request);
  ::AddRequest* unsafe_arena_release_add_request();

  // .ApplyRequest apply_request = 7;
  bool has_apply_request() const;
  private:
  bool _internal_has_apply_request() const;
  public:
  void clear_apply_request();
  const ::ApplyRequest& apply_request() const;
  ::ApplyRequest* release_apply_request();
  ::ApplyRequest* mutable_apply_request();
  void set_allocated_apply_request(::ApplyRequest* apply_request);
  private:
  const ::ApplyRequest& _internal_apply_request() const;
  ::ApplyRequest* _internal_mutable_apply_request();
  public:
  void unsafe_arena_set_allocated_apply_request(
      ::ApplyRequest* apply_request);
  ::ApplyRequest* unsafe_arena_release_apply_request();

  // .UpdateRelationship update_rela = 8;
  bool has_update_rela() const;
  private:
  bool _internal_has_update_rela() const;
  public:
  void clear_update_rela();
  const ::UpdateRelationship& update_rela() const;
  ::UpdateRelationship* release_update_rela();
  ::UpdateRelationship* mutable_update_rela();
  void set_allocated_update_rela(::UpdateRelationship* update_rela);
  private:
  const ::UpdateRelationship& _internal_update_rela() const;
  ::UpdateRelationship* _internal_mutable_update_rela();
  public:
  void unsafe_arena_set_allocated_update_rela(
      ::UpdateRelationship* update_rela);
  ::UpdateRelationship* unsafe_arena_release_update_rela();

  // .UserInfoRequest user_info = 9;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::UserInfoRequest& user_info() const;
  ::UserInfoRequest* release_user_info();
  ::UserInfoRequest* mutable_user_info();
  void set_allocated_user_info(::UserInfoRequest* user_info);
  private:
  const ::UserInfoRequest& _internal_user_info() const;
  ::UserInfoRequest* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::UserInfoRequest* user_info);
  ::UserInfoRequest* unsafe_arena_release_user_info();

  // .FriendListRequest friend_list = 10;
  bool has_friend_list() const;
  private:
  bool _internal_has_friend_list() const;
  public:
  void clear_friend_list();
  const ::FriendListRequest& friend_list() const;
  ::FriendListRequest* release_friend_list();
  ::FriendListRequest* mutable_friend_list();
  void set_allocated_friend_list(::FriendListRequest* friend_list);
  private:
  const ::FriendListRequest& _internal_friend_list() const;
  ::FriendListRequest* _internal_mutable_friend_list();
  public:
  void unsafe_arena_set_allocated_friend_list(
      ::FriendListRequest* friend_list);
  ::FriendListRequest* unsafe_arena_release_friend_list();

  // .CommunicationRequest communication = 11;
  bool has_communication() const;
  private:
  bool _internal_has_communication() const;
  public:
  void clear_communication();
  const ::CommunicationRequest& communication() const;
  ::CommunicationRequest* release_communication();
  ::CommunicationRequest* mutable_communication();
  void set_allocated_communication(::CommunicationRequest* communication);
  private:
  const ::CommunicationRequest& _internal_communication() const;
  ::CommunicationRequest* _internal_mutable_communication();
  public:
  void unsafe_arena_set_allocated_communication(
      ::CommunicationRequest* communication);
  ::CommunicationRequest* unsafe_arena_release_communication();

  // .offlineMsgRequest offline_request = 12;
  bool has_offline_request() const;
  private:
  bool _internal_has_offline_request() const;
  public:
  void clear_offline_request();
  const ::offlineMsgRequest& offline_request() const;
  ::offlineMsgRequest* release_offline_request();
  ::offlineMsgRequest* mutable_offline_request();
  void set_allocated_offline_request(::offlineMsgRequest* offline_request);
  private:
  const ::offlineMsgRequest& _internal_offline_request() const;
  ::offlineMsgRequest* _internal_mutable_offline_request();
  public:
  void unsafe_arena_set_allocated_offline_request(
      ::offlineMsgRequest* offline_request);
  ::offlineMsgRequest* unsafe_arena_release_offline_request();

  // .heartCheck heart = 13;
  bool has_heart() const;
  private:
  bool _internal_has_heart() const;
  public:
  void clear_heart();
  const ::heartCheck& heart() const;
  ::heartCheck* release_heart();
  ::heartCheck* mutable_heart();
  void set_allocated_heart(::heartCheck* heart);
  private:
  const ::heartCheck& _internal_heart() const;
  ::heartCheck* _internal_mutable_heart();
  public:
  void unsafe_arena_set_allocated_heart(
      ::heartCheck* heart);
  ::heartCheck* unsafe_arena_release_heart();

  // .GetImageRequest image_request = 14;
  bool has_image_request() const;
  private:
  bool _internal_has_image_request() const;
  public:
  void clear_image_request();
  const ::GetImageRequest& image_request() const;
  ::GetImageRequest* release_image_request();
  ::GetImageRequest* mutable_image_request();
  void set_allocated_image_request(::GetImageRequest* image_request);
  private:
  const ::GetImageRequest& _internal_image_request() const;
  ::GetImageRequest* _internal_mutable_image_request();
  public:
  void unsafe_arena_set_allocated_image_request(
      ::GetImageRequest* image_request);
  ::GetImageRequest* unsafe_arena_release_image_request();

  // .addImageRequest add_image = 15;
  bool has_add_image() const;
  private:
  bool _internal_has_add_image() const;
  public:
  void clear_add_image();
  const ::addImageRequest& add_image() const;
  ::addImageRequest* release_add_image();
  ::addImageRequest* mutable_add_image();
  void set_allocated_add_image(::addImageRequest* add_image);
  private:
  const ::addImageRequest& _internal_add_image() const;
  ::addImageRequest* _internal_mutable_add_image();
  public:
  void unsafe_arena_set_allocated_add_image(
      ::addImageRequest* add_image);
  ::addImageRequest* unsafe_arena_release_add_image();

  // .deleteFriendRequest delete_friend = 16;
  bool has_delete_friend() const;
  private:
  bool _internal_has_delete_friend() const;
  public:
  void clear_delete_friend();
  const ::deleteFriendRequest& delete_friend() const;
  ::deleteFriendRequest* release_delete_friend();
  ::deleteFriendRequest* mutable_delete_friend();
  void set_allocated_delete_friend(::deleteFriendRequest* delete_friend);
  private:
  const ::deleteFriendRequest& _internal_delete_friend() const;
  ::deleteFriendRequest* _internal_mutable_delete_friend();
  public:
  void unsafe_arena_set_allocated_delete_friend(
      ::deleteFriendRequest* delete_friend);
  ::deleteFriendRequest* unsafe_arena_release_delete_friend();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:PullRequest)
 private:
  class _Internal;
  void set_has_login_request();
  void set_has_register_request();
  void set_has_client_id();
  void set_has_ima_request();
  void set_has_search_request();
  void set_has_add_request();
  void set_has_apply_request();
  void set_has_update_rela();
  void set_has_user_info();
  void set_has_friend_list();
  void set_has_communication();
  void set_has_offline_request();
  void set_has_heart();
  void set_has_image_request();
  void set_has_add_image();
  void set_has_delete_friend();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestTypeUnion {
    RequestTypeUnion() {}
    ::LoginRequest* login_request_;
    ::RegisterRequest* register_request_;
    ::ClientId* client_id_;
    ::UpdateImaRequest* ima_request_;
    ::SearchRequest* search_request_;
    ::AddRequest* add_request_;
    ::ApplyRequest* apply_request_;
    ::UpdateRelationship* update_rela_;
    ::UserInfoRequest* user_info_;
    ::FriendListRequest* friend_list_;
    ::CommunicationRequest* communication_;
    ::offlineMsgRequest* offline_request_;
    ::heartCheck* heart_;
    ::GetImageRequest* image_request_;
    ::addImageRequest* add_image_;
    ::deleteFriendRequest* delete_friend_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoRespond) */ {
 public:
  inline UserInfoRespond() : UserInfoRespond(nullptr) {};
  virtual ~UserInfoRespond();

  UserInfoRespond(const UserInfoRespond& from);
  UserInfoRespond(UserInfoRespond&& from) noexcept
    : UserInfoRespond() {
    *this = ::std::move(from);
  }

  inline UserInfoRespond& operator=(const UserInfoRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRespond& operator=(UserInfoRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoRespond* internal_default_instance() {
    return reinterpret_cast<const UserInfoRespond*>(
               &_UserInfoRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UserInfoRespond& a, UserInfoRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoRespond* New() const final {
    return CreateMaybeMessage<UserInfoRespond>(nullptr);
  }

  UserInfoRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoRespond& from);
  void MergeFrom(const UserInfoRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoRespond";
  }
  protected:
  explicit UserInfoRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kImageFieldNumber = 4,
    kCreateTimeFieldNumber = 5,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account(
      std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // bytes image = 4;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image(
      std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string createTime = 5;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_createtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_createtime(
      std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // @@protoc_insertion_point(class_scope:UserInfoRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class LoginARegisterRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginARegisterRespond) */ {
 public:
  inline LoginARegisterRespond() : LoginARegisterRespond(nullptr) {};
  virtual ~LoginARegisterRespond();

  LoginARegisterRespond(const LoginARegisterRespond& from);
  LoginARegisterRespond(LoginARegisterRespond&& from) noexcept
    : LoginARegisterRespond() {
    *this = ::std::move(from);
  }

  inline LoginARegisterRespond& operator=(const LoginARegisterRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginARegisterRespond& operator=(LoginARegisterRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginARegisterRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginARegisterRespond* internal_default_instance() {
    return reinterpret_cast<const LoginARegisterRespond*>(
               &_LoginARegisterRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LoginARegisterRespond& a, LoginARegisterRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginARegisterRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginARegisterRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginARegisterRespond* New() const final {
    return CreateMaybeMessage<LoginARegisterRespond>(nullptr);
  }

  LoginARegisterRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginARegisterRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginARegisterRespond& from);
  void MergeFrom(const LoginARegisterRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginARegisterRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginARegisterRespond";
  }
  protected:
  explicit LoginARegisterRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LoginARegisterRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ApplyRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ApplyRespond) */ {
 public:
  inline ApplyRespond() : ApplyRespond(nullptr) {};
  virtual ~ApplyRespond();

  ApplyRespond(const ApplyRespond& from);
  ApplyRespond(ApplyRespond&& from) noexcept
    : ApplyRespond() {
    *this = ::std::move(from);
  }

  inline ApplyRespond& operator=(const ApplyRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyRespond& operator=(ApplyRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyRespond* internal_default_instance() {
    return reinterpret_cast<const ApplyRespond*>(
               &_ApplyRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ApplyRespond& a, ApplyRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyRespond* New() const final {
    return CreateMaybeMessage<ApplyRespond>(nullptr);
  }

  ApplyRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyRespond& from);
  void MergeFrom(const ApplyRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ApplyRespond";
  }
  protected:
  explicit ApplyRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .ApplyInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::ApplyInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ApplyInfo >*
      mutable_infos();
  private:
  const ::ApplyInfo& _internal_infos(int index) const;
  ::ApplyInfo* _internal_add_infos();
  public:
  const ::ApplyInfo& infos(int index) const;
  ::ApplyInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ApplyInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:ApplyRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ApplyInfo > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ApplyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ApplyInfo) */ {
 public:
  inline ApplyInfo() : ApplyInfo(nullptr) {};
  virtual ~ApplyInfo();

  ApplyInfo(const ApplyInfo& from);
  ApplyInfo(ApplyInfo&& from) noexcept
    : ApplyInfo() {
    *this = ::std::move(from);
  }

  inline ApplyInfo& operator=(const ApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyInfo& operator=(ApplyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyInfo& default_instance();

  enum RequestTypeCase {
    kFriendApply = 1,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyInfo* internal_default_instance() {
    return reinterpret_cast<const ApplyInfo*>(
               &_ApplyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ApplyInfo& a, ApplyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyInfo* New() const final {
    return CreateMaybeMessage<ApplyInfo>(nullptr);
  }

  ApplyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyInfo& from);
  void MergeFrom(const ApplyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ApplyInfo";
  }
  protected:
  explicit ApplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyTimeFieldNumber = 2,
    kFriendApplyFieldNumber = 1,
  };
  // string apply_time = 2;
  void clear_apply_time();
  const std::string& apply_time() const;
  void set_apply_time(const std::string& value);
  void set_apply_time(std::string&& value);
  void set_apply_time(const char* value);
  void set_apply_time(const char* value, size_t size);
  std::string* mutable_apply_time();
  std::string* release_apply_time();
  void set_allocated_apply_time(std::string* apply_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_apply_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_apply_time(
      std::string* apply_time);
  private:
  const std::string& _internal_apply_time() const;
  void _internal_set_apply_time(const std::string& value);
  std::string* _internal_mutable_apply_time();
  public:

  // .FriendApply friend_apply = 1;
  bool has_friend_apply() const;
  private:
  bool _internal_has_friend_apply() const;
  public:
  void clear_friend_apply();
  const ::FriendApply& friend_apply() const;
  ::FriendApply* release_friend_apply();
  ::FriendApply* mutable_friend_apply();
  void set_allocated_friend_apply(::FriendApply* friend_apply);
  private:
  const ::FriendApply& _internal_friend_apply() const;
  ::FriendApply* _internal_mutable_friend_apply();
  public:
  void unsafe_arena_set_allocated_friend_apply(
      ::FriendApply* friend_apply);
  ::FriendApply* unsafe_arena_release_friend_apply();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:ApplyInfo)
 private:
  class _Internal;
  void set_has_friend_apply();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_time_;
  union RequestTypeUnion {
    RequestTypeUnion() {}
    ::FriendApply* friend_apply_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class FriendApply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendApply) */ {
 public:
  inline FriendApply() : FriendApply(nullptr) {};
  virtual ~FriendApply();

  FriendApply(const FriendApply& from);
  FriendApply(FriendApply&& from) noexcept
    : FriendApply() {
    *this = ::std::move(from);
  }

  inline FriendApply& operator=(const FriendApply& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendApply& operator=(FriendApply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendApply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendApply* internal_default_instance() {
    return reinterpret_cast<const FriendApply*>(
               &_FriendApply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FriendApply& a, FriendApply& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendApply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendApply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendApply* New() const final {
    return CreateMaybeMessage<FriendApply>(nullptr);
  }

  FriendApply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendApply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendApply& from);
  void MergeFrom(const FriendApply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendApply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendApply";
  }
  protected:
  explicit FriendApply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FriendApply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class SearchInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchInfo) */ {
 public:
  inline SearchInfo() : SearchInfo(nullptr) {};
  virtual ~SearchInfo();

  SearchInfo(const SearchInfo& from);
  SearchInfo(SearchInfo&& from) noexcept
    : SearchInfo() {
    *this = ::std::move(from);
  }

  inline SearchInfo& operator=(const SearchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchInfo& operator=(SearchInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchInfo* internal_default_instance() {
    return reinterpret_cast<const SearchInfo*>(
               &_SearchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SearchInfo& a, SearchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchInfo* New() const final {
    return CreateMaybeMessage<SearchInfo>(nullptr);
  }

  SearchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchInfo& from);
  void MergeFrom(const SearchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchInfo";
  }
  protected:
  explicit SearchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account(
      std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:SearchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class SearchRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchRespond) */ {
 public:
  inline SearchRespond() : SearchRespond(nullptr) {};
  virtual ~SearchRespond();

  SearchRespond(const SearchRespond& from);
  SearchRespond(SearchRespond&& from) noexcept
    : SearchRespond() {
    *this = ::std::move(from);
  }

  inline SearchRespond& operator=(const SearchRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRespond& operator=(SearchRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRespond* internal_default_instance() {
    return reinterpret_cast<const SearchRespond*>(
               &_SearchRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SearchRespond& a, SearchRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRespond* New() const final {
    return CreateMaybeMessage<SearchRespond>(nullptr);
  }

  SearchRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRespond& from);
  void MergeFrom(const SearchRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchRespond";
  }
  protected:
  explicit SearchRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .SearchInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::SearchInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchInfo >*
      mutable_infos();
  private:
  const ::SearchInfo& _internal_infos(int index) const;
  ::SearchInfo* _internal_add_infos();
  public:
  const ::SearchInfo& infos(int index) const;
  ::SearchInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:SearchRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchInfo > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class AddRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddRespond) */ {
 public:
  inline AddRespond() : AddRespond(nullptr) {};
  virtual ~AddRespond();

  AddRespond(const AddRespond& from);
  AddRespond(AddRespond&& from) noexcept
    : AddRespond() {
    *this = ::std::move(from);
  }

  inline AddRespond& operator=(const AddRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRespond& operator=(AddRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRespond* internal_default_instance() {
    return reinterpret_cast<const AddRespond*>(
               &_AddRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AddRespond& a, AddRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRespond* New() const final {
    return CreateMaybeMessage<AddRespond>(nullptr);
  }

  AddRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRespond& from);
  void MergeFrom(const AddRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddRespond";
  }
  protected:
  explicit AddRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AddRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class FriendListRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendListRespond) */ {
 public:
  inline FriendListRespond() : FriendListRespond(nullptr) {};
  virtual ~FriendListRespond();

  FriendListRespond(const FriendListRespond& from);
  FriendListRespond(FriendListRespond&& from) noexcept
    : FriendListRespond() {
    *this = ::std::move(from);
  }

  inline FriendListRespond& operator=(const FriendListRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListRespond& operator=(FriendListRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendListRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListRespond* internal_default_instance() {
    return reinterpret_cast<const FriendListRespond*>(
               &_FriendListRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FriendListRespond& a, FriendListRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendListRespond* New() const final {
    return CreateMaybeMessage<FriendListRespond>(nullptr);
  }

  FriendListRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendListRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendListRespond& from);
  void MergeFrom(const FriendListRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendListRespond";
  }
  protected:
  explicit FriendListRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // repeated string user_id = 1;
  int user_id_size() const;
  private:
  int _internal_user_id_size() const;
  public:
  void clear_user_id();
  const std::string& user_id(int index) const;
  std::string* mutable_user_id(int index);
  void set_user_id(int index, const std::string& value);
  void set_user_id(int index, std::string&& value);
  void set_user_id(int index, const char* value);
  void set_user_id(int index, const char* value, size_t size);
  std::string* add_user_id();
  void add_user_id(const std::string& value);
  void add_user_id(std::string&& value);
  void add_user_id(const char* value);
  void add_user_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_id();
  private:
  const std::string& _internal_user_id(int index) const;
  std::string* _internal_add_user_id();
  public:

  // @@protoc_insertion_point(class_scope:FriendListRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class GetImageRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetImageRespond) */ {
 public:
  inline GetImageRespond() : GetImageRespond(nullptr) {};
  virtual ~GetImageRespond();

  GetImageRespond(const GetImageRespond& from);
  GetImageRespond(GetImageRespond&& from) noexcept
    : GetImageRespond() {
    *this = ::std::move(from);
  }

  inline GetImageRespond& operator=(const GetImageRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageRespond& operator=(GetImageRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageRespond* internal_default_instance() {
    return reinterpret_cast<const GetImageRespond*>(
               &_GetImageRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetImageRespond& a, GetImageRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageRespond* New() const final {
    return CreateMaybeMessage<GetImageRespond>(nullptr);
  }

  GetImageRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageRespond& from);
  void MergeFrom(const GetImageRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetImageRespond";
  }
  protected:
  explicit GetImageRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgDataFieldNumber = 1,
  };
  // bytes img_data = 1;
  void clear_img_data();
  const std::string& img_data() const;
  void set_img_data(const std::string& value);
  void set_img_data(std::string&& value);
  void set_img_data(const char* value);
  void set_img_data(const void* value, size_t size);
  std::string* mutable_img_data();
  std::string* release_img_data();
  void set_allocated_img_data(std::string* img_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_img_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_img_data(
      std::string* img_data);
  private:
  const std::string& _internal_img_data() const;
  void _internal_set_img_data(const std::string& value);
  std::string* _internal_mutable_img_data();
  public:

  // @@protoc_insertion_point(class_scope:GetImageRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class addImageRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:addImageRespond) */ {
 public:
  inline addImageRespond() : addImageRespond(nullptr) {};
  virtual ~addImageRespond();

  addImageRespond(const addImageRespond& from);
  addImageRespond(addImageRespond&& from) noexcept
    : addImageRespond() {
    *this = ::std::move(from);
  }

  inline addImageRespond& operator=(const addImageRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline addImageRespond& operator=(addImageRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addImageRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addImageRespond* internal_default_instance() {
    return reinterpret_cast<const addImageRespond*>(
               &_addImageRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(addImageRespond& a, addImageRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(addImageRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addImageRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addImageRespond* New() const final {
    return CreateMaybeMessage<addImageRespond>(nullptr);
  }

  addImageRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addImageRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addImageRespond& from);
  void MergeFrom(const addImageRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addImageRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "addImageRespond";
  }
  protected:
  explicit addImageRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:addImageRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class deleteFriendRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:deleteFriendRespond) */ {
 public:
  inline deleteFriendRespond() : deleteFriendRespond(nullptr) {};
  virtual ~deleteFriendRespond();

  deleteFriendRespond(const deleteFriendRespond& from);
  deleteFriendRespond(deleteFriendRespond&& from) noexcept
    : deleteFriendRespond() {
    *this = ::std::move(from);
  }

  inline deleteFriendRespond& operator=(const deleteFriendRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteFriendRespond& operator=(deleteFriendRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const deleteFriendRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteFriendRespond* internal_default_instance() {
    return reinterpret_cast<const deleteFriendRespond*>(
               &_deleteFriendRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(deleteFriendRespond& a, deleteFriendRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteFriendRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteFriendRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline deleteFriendRespond* New() const final {
    return CreateMaybeMessage<deleteFriendRespond>(nullptr);
  }

  deleteFriendRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<deleteFriendRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const deleteFriendRespond& from);
  void MergeFrom(const deleteFriendRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteFriendRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "deleteFriendRespond";
  }
  protected:
  explicit deleteFriendRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:deleteFriendRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class PullRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PullRespond) */ {
 public:
  inline PullRespond() : PullRespond(nullptr) {};
  virtual ~PullRespond();

  PullRespond(const PullRespond& from);
  PullRespond(PullRespond&& from) noexcept
    : PullRespond() {
    *this = ::std::move(from);
  }

  inline PullRespond& operator=(const PullRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullRespond& operator=(PullRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullRespond& default_instance();

  enum RequestTypeCase {
    kLginRegRespond = 1,
    kImaRespond = 2,
    kSearchRespond = 3,
    kAddRespond = 4,
    kServerMsg = 5,
    kApplyRespond = 6,
    kUpdateRela = 7,
    kUserInfo = 8,
    kFriendList = 9,
    kCommunication = 10,
    kOfflineRespond = 11,
    kImageRespond = 12,
    kAddImage = 13,
    kDeleteFriend = 14,
    REQUEST_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullRespond* internal_default_instance() {
    return reinterpret_cast<const PullRespond*>(
               &_PullRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PullRespond& a, PullRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(PullRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullRespond* New() const final {
    return CreateMaybeMessage<PullRespond>(nullptr);
  }

  PullRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullRespond& from);
  void MergeFrom(const PullRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PullRespond";
  }
  protected:
  explicit PullRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLginRegRespondFieldNumber = 1,
    kImaRespondFieldNumber = 2,
    kSearchRespondFieldNumber = 3,
    kAddRespondFieldNumber = 4,
    kServerMsgFieldNumber = 5,
    kApplyRespondFieldNumber = 6,
    kUpdateRelaFieldNumber = 7,
    kUserInfoFieldNumber = 8,
    kFriendListFieldNumber = 9,
    kCommunicationFieldNumber = 10,
    kOfflineRespondFieldNumber = 11,
    kImageRespondFieldNumber = 12,
    kAddImageFieldNumber = 13,
    kDeleteFriendFieldNumber = 14,
  };
  // .LoginARegisterRespond lginReg_respond = 1;
  bool has_lginreg_respond() const;
  private:
  bool _internal_has_lginreg_respond() const;
  public:
  void clear_lginreg_respond();
  const ::LoginARegisterRespond& lginreg_respond() const;
  ::LoginARegisterRespond* release_lginreg_respond();
  ::LoginARegisterRespond* mutable_lginreg_respond();
  void set_allocated_lginreg_respond(::LoginARegisterRespond* lginreg_respond);
  private:
  const ::LoginARegisterRespond& _internal_lginreg_respond() const;
  ::LoginARegisterRespond* _internal_mutable_lginreg_respond();
  public:
  void unsafe_arena_set_allocated_lginreg_respond(
      ::LoginARegisterRespond* lginreg_respond);
  ::LoginARegisterRespond* unsafe_arena_release_lginreg_respond();

  // .UpdateImaRespond ima_respond = 2;
  bool has_ima_respond() const;
  private:
  bool _internal_has_ima_respond() const;
  public:
  void clear_ima_respond();
  const ::UpdateImaRespond& ima_respond() const;
  ::UpdateImaRespond* release_ima_respond();
  ::UpdateImaRespond* mutable_ima_respond();
  void set_allocated_ima_respond(::UpdateImaRespond* ima_respond);
  private:
  const ::UpdateImaRespond& _internal_ima_respond() const;
  ::UpdateImaRespond* _internal_mutable_ima_respond();
  public:
  void unsafe_arena_set_allocated_ima_respond(
      ::UpdateImaRespond* ima_respond);
  ::UpdateImaRespond* unsafe_arena_release_ima_respond();

  // .SearchRespond search_respond = 3;
  bool has_search_respond() const;
  private:
  bool _internal_has_search_respond() const;
  public:
  void clear_search_respond();
  const ::SearchRespond& search_respond() const;
  ::SearchRespond* release_search_respond();
  ::SearchRespond* mutable_search_respond();
  void set_allocated_search_respond(::SearchRespond* search_respond);
  private:
  const ::SearchRespond& _internal_search_respond() const;
  ::SearchRespond* _internal_mutable_search_respond();
  public:
  void unsafe_arena_set_allocated_search_respond(
      ::SearchRespond* search_respond);
  ::SearchRespond* unsafe_arena_release_search_respond();

  // .AddRespond add_respond = 4;
  bool has_add_respond() const;
  private:
  bool _internal_has_add_respond() const;
  public:
  void clear_add_respond();
  const ::AddRespond& add_respond() const;
  ::AddRespond* release_add_respond();
  ::AddRespond* mutable_add_respond();
  void set_allocated_add_respond(::AddRespond* add_respond);
  private:
  const ::AddRespond& _internal_add_respond() const;
  ::AddRespond* _internal_mutable_add_respond();
  public:
  void unsafe_arena_set_allocated_add_respond(
      ::AddRespond* add_respond);
  ::AddRespond* unsafe_arena_release_add_respond();

  // .ServerMsg server_msg = 5;
  bool has_server_msg() const;
  private:
  bool _internal_has_server_msg() const;
  public:
  void clear_server_msg();
  const ::ServerMsg& server_msg() const;
  ::ServerMsg* release_server_msg();
  ::ServerMsg* mutable_server_msg();
  void set_allocated_server_msg(::ServerMsg* server_msg);
  private:
  const ::ServerMsg& _internal_server_msg() const;
  ::ServerMsg* _internal_mutable_server_msg();
  public:
  void unsafe_arena_set_allocated_server_msg(
      ::ServerMsg* server_msg);
  ::ServerMsg* unsafe_arena_release_server_msg();

  // .ApplyRespond apply_respond = 6;
  bool has_apply_respond() const;
  private:
  bool _internal_has_apply_respond() const;
  public:
  void clear_apply_respond();
  const ::ApplyRespond& apply_respond() const;
  ::ApplyRespond* release_apply_respond();
  ::ApplyRespond* mutable_apply_respond();
  void set_allocated_apply_respond(::ApplyRespond* apply_respond);
  private:
  const ::ApplyRespond& _internal_apply_respond() const;
  ::ApplyRespond* _internal_mutable_apply_respond();
  public:
  void unsafe_arena_set_allocated_apply_respond(
      ::ApplyRespond* apply_respond);
  ::ApplyRespond* unsafe_arena_release_apply_respond();

  // .UpdateRelationship update_rela = 7;
  bool has_update_rela() const;
  private:
  bool _internal_has_update_rela() const;
  public:
  void clear_update_rela();
  const ::UpdateRelationship& update_rela() const;
  ::UpdateRelationship* release_update_rela();
  ::UpdateRelationship* mutable_update_rela();
  void set_allocated_update_rela(::UpdateRelationship* update_rela);
  private:
  const ::UpdateRelationship& _internal_update_rela() const;
  ::UpdateRelationship* _internal_mutable_update_rela();
  public:
  void unsafe_arena_set_allocated_update_rela(
      ::UpdateRelationship* update_rela);
  ::UpdateRelationship* unsafe_arena_release_update_rela();

  // .UserInfoRespond user_info = 8;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::UserInfoRespond& user_info() const;
  ::UserInfoRespond* release_user_info();
  ::UserInfoRespond* mutable_user_info();
  void set_allocated_user_info(::UserInfoRespond* user_info);
  private:
  const ::UserInfoRespond& _internal_user_info() const;
  ::UserInfoRespond* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::UserInfoRespond* user_info);
  ::UserInfoRespond* unsafe_arena_release_user_info();

  // .FriendListRespond friend_list = 9;
  bool has_friend_list() const;
  private:
  bool _internal_has_friend_list() const;
  public:
  void clear_friend_list();
  const ::FriendListRespond& friend_list() const;
  ::FriendListRespond* release_friend_list();
  ::FriendListRespond* mutable_friend_list();
  void set_allocated_friend_list(::FriendListRespond* friend_list);
  private:
  const ::FriendListRespond& _internal_friend_list() const;
  ::FriendListRespond* _internal_mutable_friend_list();
  public:
  void unsafe_arena_set_allocated_friend_list(
      ::FriendListRespond* friend_list);
  ::FriendListRespond* unsafe_arena_release_friend_list();

  // .CommunicationRespond communication = 10;
  bool has_communication() const;
  private:
  bool _internal_has_communication() const;
  public:
  void clear_communication();
  const ::CommunicationRespond& communication() const;
  ::CommunicationRespond* release_communication();
  ::CommunicationRespond* mutable_communication();
  void set_allocated_communication(::CommunicationRespond* communication);
  private:
  const ::CommunicationRespond& _internal_communication() const;
  ::CommunicationRespond* _internal_mutable_communication();
  public:
  void unsafe_arena_set_allocated_communication(
      ::CommunicationRespond* communication);
  ::CommunicationRespond* unsafe_arena_release_communication();

  // .offlineMsgRespond offline_respond = 11;
  bool has_offline_respond() const;
  private:
  bool _internal_has_offline_respond() const;
  public:
  void clear_offline_respond();
  const ::offlineMsgRespond& offline_respond() const;
  ::offlineMsgRespond* release_offline_respond();
  ::offlineMsgRespond* mutable_offline_respond();
  void set_allocated_offline_respond(::offlineMsgRespond* offline_respond);
  private:
  const ::offlineMsgRespond& _internal_offline_respond() const;
  ::offlineMsgRespond* _internal_mutable_offline_respond();
  public:
  void unsafe_arena_set_allocated_offline_respond(
      ::offlineMsgRespond* offline_respond);
  ::offlineMsgRespond* unsafe_arena_release_offline_respond();

  // .GetImageRespond image_respond = 12;
  bool has_image_respond() const;
  private:
  bool _internal_has_image_respond() const;
  public:
  void clear_image_respond();
  const ::GetImageRespond& image_respond() const;
  ::GetImageRespond* release_image_respond();
  ::GetImageRespond* mutable_image_respond();
  void set_allocated_image_respond(::GetImageRespond* image_respond);
  private:
  const ::GetImageRespond& _internal_image_respond() const;
  ::GetImageRespond* _internal_mutable_image_respond();
  public:
  void unsafe_arena_set_allocated_image_respond(
      ::GetImageRespond* image_respond);
  ::GetImageRespond* unsafe_arena_release_image_respond();

  // .addImageRespond add_image = 13;
  bool has_add_image() const;
  private:
  bool _internal_has_add_image() const;
  public:
  void clear_add_image();
  const ::addImageRespond& add_image() const;
  ::addImageRespond* release_add_image();
  ::addImageRespond* mutable_add_image();
  void set_allocated_add_image(::addImageRespond* add_image);
  private:
  const ::addImageRespond& _internal_add_image() const;
  ::addImageRespond* _internal_mutable_add_image();
  public:
  void unsafe_arena_set_allocated_add_image(
      ::addImageRespond* add_image);
  ::addImageRespond* unsafe_arena_release_add_image();

  // .deleteFriendRespond delete_friend = 14;
  bool has_delete_friend() const;
  private:
  bool _internal_has_delete_friend() const;
  public:
  void clear_delete_friend();
  const ::deleteFriendRespond& delete_friend() const;
  ::deleteFriendRespond* release_delete_friend();
  ::deleteFriendRespond* mutable_delete_friend();
  void set_allocated_delete_friend(::deleteFriendRespond* delete_friend);
  private:
  const ::deleteFriendRespond& _internal_delete_friend() const;
  ::deleteFriendRespond* _internal_mutable_delete_friend();
  public:
  void unsafe_arena_set_allocated_delete_friend(
      ::deleteFriendRespond* delete_friend);
  ::deleteFriendRespond* unsafe_arena_release_delete_friend();

  void clear_request_type();
  RequestTypeCase request_type_case() const;
  // @@protoc_insertion_point(class_scope:PullRespond)
 private:
  class _Internal;
  void set_has_lginreg_respond();
  void set_has_ima_respond();
  void set_has_search_respond();
  void set_has_add_respond();
  void set_has_server_msg();
  void set_has_apply_respond();
  void set_has_update_rela();
  void set_has_user_info();
  void set_has_friend_list();
  void set_has_communication();
  void set_has_offline_respond();
  void set_has_image_respond();
  void set_has_add_image();
  void set_has_delete_friend();

  inline bool has_request_type() const;
  inline void clear_has_request_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestTypeUnion {
    RequestTypeUnion() {}
    ::LoginARegisterRespond* lginreg_respond_;
    ::UpdateImaRespond* ima_respond_;
    ::SearchRespond* search_respond_;
    ::AddRespond* add_respond_;
    ::ServerMsg* server_msg_;
    ::ApplyRespond* apply_respond_;
    ::UpdateRelationship* update_rela_;
    ::UserInfoRespond* user_info_;
    ::FriendListRespond* friend_list_;
    ::CommunicationRespond* communication_;
    ::offlineMsgRespond* offline_respond_;
    ::GetImageRespond* image_respond_;
    ::addImageRespond* add_image_;
    ::deleteFriendRespond* delete_friend_;
  } request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class UpdateImaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateImaRequest) */ {
 public:
  inline UpdateImaRequest() : UpdateImaRequest(nullptr) {};
  virtual ~UpdateImaRequest();

  UpdateImaRequest(const UpdateImaRequest& from);
  UpdateImaRequest(UpdateImaRequest&& from) noexcept
    : UpdateImaRequest() {
    *this = ::std::move(from);
  }

  inline UpdateImaRequest& operator=(const UpdateImaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateImaRequest& operator=(UpdateImaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateImaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateImaRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateImaRequest*>(
               &_UpdateImaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UpdateImaRequest& a, UpdateImaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateImaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateImaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateImaRequest* New() const final {
    return CreateMaybeMessage<UpdateImaRequest>(nullptr);
  }

  UpdateImaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateImaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateImaRequest& from);
  void MergeFrom(const UpdateImaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateImaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateImaRequest";
  }
  protected:
  explicit UpdateImaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kImgDateFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes img_date = 2;
  void clear_img_date();
  const std::string& img_date() const;
  void set_img_date(const std::string& value);
  void set_img_date(std::string&& value);
  void set_img_date(const char* value);
  void set_img_date(const void* value, size_t size);
  std::string* mutable_img_date();
  std::string* release_img_date();
  void set_allocated_img_date(std::string* img_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_img_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_img_date(
      std::string* img_date);
  private:
  const std::string& _internal_img_date() const;
  void _internal_set_img_date(const std::string& value);
  std::string* _internal_mutable_img_date();
  public:

  // @@protoc_insertion_point(class_scope:UpdateImaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class UpdateImaRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpdateImaRespond) */ {
 public:
  inline UpdateImaRespond() : UpdateImaRespond(nullptr) {};
  virtual ~UpdateImaRespond();

  UpdateImaRespond(const UpdateImaRespond& from);
  UpdateImaRespond(UpdateImaRespond&& from) noexcept
    : UpdateImaRespond() {
    *this = ::std::move(from);
  }

  inline UpdateImaRespond& operator=(const UpdateImaRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateImaRespond& operator=(UpdateImaRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateImaRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateImaRespond* internal_default_instance() {
    return reinterpret_cast<const UpdateImaRespond*>(
               &_UpdateImaRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UpdateImaRespond& a, UpdateImaRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateImaRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateImaRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateImaRespond* New() const final {
    return CreateMaybeMessage<UpdateImaRespond>(nullptr);
  }

  UpdateImaRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateImaRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateImaRespond& from);
  void MergeFrom(const UpdateImaRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateImaRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpdateImaRespond";
  }
  protected:
  explicit UpdateImaRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:UpdateImaRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class offlineMsgRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offlineMsgRequest) */ {
 public:
  inline offlineMsgRequest() : offlineMsgRequest(nullptr) {};
  virtual ~offlineMsgRequest();

  offlineMsgRequest(const offlineMsgRequest& from);
  offlineMsgRequest(offlineMsgRequest&& from) noexcept
    : offlineMsgRequest() {
    *this = ::std::move(from);
  }

  inline offlineMsgRequest& operator=(const offlineMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline offlineMsgRequest& operator=(offlineMsgRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const offlineMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offlineMsgRequest* internal_default_instance() {
    return reinterpret_cast<const offlineMsgRequest*>(
               &_offlineMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(offlineMsgRequest& a, offlineMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(offlineMsgRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(offlineMsgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline offlineMsgRequest* New() const final {
    return CreateMaybeMessage<offlineMsgRequest>(nullptr);
  }

  offlineMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<offlineMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const offlineMsgRequest& from);
  void MergeFrom(const offlineMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offlineMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offlineMsgRequest";
  }
  protected:
  explicit offlineMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:offlineMsgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class offlineMsgRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offlineMsgRespond) */ {
 public:
  inline offlineMsgRespond() : offlineMsgRespond(nullptr) {};
  virtual ~offlineMsgRespond();

  offlineMsgRespond(const offlineMsgRespond& from);
  offlineMsgRespond(offlineMsgRespond&& from) noexcept
    : offlineMsgRespond() {
    *this = ::std::move(from);
  }

  inline offlineMsgRespond& operator=(const offlineMsgRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline offlineMsgRespond& operator=(offlineMsgRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const offlineMsgRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offlineMsgRespond* internal_default_instance() {
    return reinterpret_cast<const offlineMsgRespond*>(
               &_offlineMsgRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(offlineMsgRespond& a, offlineMsgRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(offlineMsgRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(offlineMsgRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline offlineMsgRespond* New() const final {
    return CreateMaybeMessage<offlineMsgRespond>(nullptr);
  }

  offlineMsgRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<offlineMsgRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const offlineMsgRespond& from);
  void MergeFrom(const offlineMsgRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offlineMsgRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offlineMsgRespond";
  }
  protected:
  explicit offlineMsgRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // repeated .offline_info info = 1;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::offline_info* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_info >*
      mutable_info();
  private:
  const ::offline_info& _internal_info(int index) const;
  ::offline_info* _internal_add_info();
  public:
  const ::offline_info& info(int index) const;
  ::offline_info* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_info >&
      info() const;

  // @@protoc_insertion_point(class_scope:offlineMsgRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_info > info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class offline_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offline_info) */ {
 public:
  inline offline_info() : offline_info(nullptr) {};
  virtual ~offline_info();

  offline_info(const offline_info& from);
  offline_info(offline_info&& from) noexcept
    : offline_info() {
    *this = ::std::move(from);
  }

  inline offline_info& operator=(const offline_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline offline_info& operator=(offline_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const offline_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_info* internal_default_instance() {
    return reinterpret_cast<const offline_info*>(
               &_offline_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(offline_info& a, offline_info& b) {
    a.Swap(&b);
  }
  inline void Swap(offline_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(offline_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline offline_info* New() const final {
    return CreateMaybeMessage<offline_info>(nullptr);
  }

  offline_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<offline_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const offline_info& from);
  void MergeFrom(const offline_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offline_info";
  }
  protected:
  explicit offline_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kMessageFieldNumber = 2,
    kTimeStempFieldNumber = 3,
    kFriendIdFieldNumber = 4,
    kMd5FieldNumber = 6,
    kMsgTypeFieldNumber = 5,
  };
  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string timeStemp = 3;
  void clear_timestemp();
  const std::string& timestemp() const;
  void set_timestemp(const std::string& value);
  void set_timestemp(std::string&& value);
  void set_timestemp(const char* value);
  void set_timestemp(const char* value, size_t size);
  std::string* mutable_timestemp();
  std::string* release_timestemp();
  void set_allocated_timestemp(std::string* timestemp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timestemp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timestemp(
      std::string* timestemp);
  private:
  const std::string& _internal_timestemp() const;
  void _internal_set_timestemp(const std::string& value);
  std::string* _internal_mutable_timestemp();
  public:

  // string friend_id = 4;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_friend_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_friend_id(
      std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // string md5 = 6;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_md5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_md5(
      std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // int32 msg_type = 5;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:offline_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestemp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class ServerMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerMsg) */ {
 public:
  inline ServerMsg() : ServerMsg(nullptr) {};
  virtual ~ServerMsg();

  ServerMsg(const ServerMsg& from);
  ServerMsg(ServerMsg&& from) noexcept
    : ServerMsg() {
    *this = ::std::move(from);
  }

  inline ServerMsg& operator=(const ServerMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMsg& operator=(ServerMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMsg& default_instance();

  enum MsgTypeCase {
    kFriendAdd = 1,
    kCommunication = 2,
    kHeart = 3,
    MSG_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMsg* internal_default_instance() {
    return reinterpret_cast<const ServerMsg*>(
               &_ServerMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ServerMsg& a, ServerMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMsg* New() const final {
    return CreateMaybeMessage<ServerMsg>(nullptr);
  }

  ServerMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMsg& from);
  void MergeFrom(const ServerMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerMsg";
  }
  protected:
  explicit ServerMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendAddFieldNumber = 1,
    kCommunicationFieldNumber = 2,
    kHeartFieldNumber = 3,
  };
  // .friendAdd friend_add = 1;
  bool has_friend_add() const;
  private:
  bool _internal_has_friend_add() const;
  public:
  void clear_friend_add();
  const ::friendAdd& friend_add() const;
  ::friendAdd* release_friend_add();
  ::friendAdd* mutable_friend_add();
  void set_allocated_friend_add(::friendAdd* friend_add);
  private:
  const ::friendAdd& _internal_friend_add() const;
  ::friendAdd* _internal_mutable_friend_add();
  public:
  void unsafe_arena_set_allocated_friend_add(
      ::friendAdd* friend_add);
  ::friendAdd* unsafe_arena_release_friend_add();

  // .CommunicationRequest communication = 2;
  bool has_communication() const;
  private:
  bool _internal_has_communication() const;
  public:
  void clear_communication();
  const ::CommunicationRequest& communication() const;
  ::CommunicationRequest* release_communication();
  ::CommunicationRequest* mutable_communication();
  void set_allocated_communication(::CommunicationRequest* communication);
  private:
  const ::CommunicationRequest& _internal_communication() const;
  ::CommunicationRequest* _internal_mutable_communication();
  public:
  void unsafe_arena_set_allocated_communication(
      ::CommunicationRequest* communication);
  ::CommunicationRequest* unsafe_arena_release_communication();

  // .heartCheck heart = 3;
  bool has_heart() const;
  private:
  bool _internal_has_heart() const;
  public:
  void clear_heart();
  const ::heartCheck& heart() const;
  ::heartCheck* release_heart();
  ::heartCheck* mutable_heart();
  void set_allocated_heart(::heartCheck* heart);
  private:
  const ::heartCheck& _internal_heart() const;
  ::heartCheck* _internal_mutable_heart();
  public:
  void unsafe_arena_set_allocated_heart(
      ::heartCheck* heart);
  ::heartCheck* unsafe_arena_release_heart();

  void clear_msg_type();
  MsgTypeCase msg_type_case() const;
  // @@protoc_insertion_point(class_scope:ServerMsg)
 private:
  class _Internal;
  void set_has_friend_add();
  void set_has_communication();
  void set_has_heart();

  inline bool has_msg_type() const;
  inline void clear_has_msg_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgTypeUnion {
    MsgTypeUnion() {}
    ::friendAdd* friend_add_;
    ::CommunicationRequest* communication_;
    ::heartCheck* heart_;
  } msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class heartCheck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:heartCheck) */ {
 public:
  inline heartCheck() : heartCheck(nullptr) {};
  virtual ~heartCheck();

  heartCheck(const heartCheck& from);
  heartCheck(heartCheck&& from) noexcept
    : heartCheck() {
    *this = ::std::move(from);
  }

  inline heartCheck& operator=(const heartCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline heartCheck& operator=(heartCheck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const heartCheck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const heartCheck* internal_default_instance() {
    return reinterpret_cast<const heartCheck*>(
               &_heartCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(heartCheck& a, heartCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(heartCheck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(heartCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline heartCheck* New() const final {
    return CreateMaybeMessage<heartCheck>(nullptr);
  }

  heartCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<heartCheck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const heartCheck& from);
  void MergeFrom(const heartCheck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(heartCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "heartCheck";
  }
  protected:
  explicit heartCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:heartCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class friendAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendAdd) */ {
 public:
  inline friendAdd() : friendAdd(nullptr) {};
  virtual ~friendAdd();

  friendAdd(const friendAdd& from);
  friendAdd(friendAdd&& from) noexcept
    : friendAdd() {
    *this = ::std::move(from);
  }

  inline friendAdd& operator=(const friendAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline friendAdd& operator=(friendAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const friendAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const friendAdd* internal_default_instance() {
    return reinterpret_cast<const friendAdd*>(
               &_friendAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(friendAdd& a, friendAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(friendAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(friendAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline friendAdd* New() const final {
    return CreateMaybeMessage<friendAdd>(nullptr);
  }

  friendAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<friendAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const friendAdd& from);
  void MergeFrom(const friendAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(friendAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendAdd";
  }
  protected:
  explicit friendAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:friendAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CommunicationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommunicationRequest) */ {
 public:
  inline CommunicationRequest() : CommunicationRequest(nullptr) {};
  virtual ~CommunicationRequest();

  CommunicationRequest(const CommunicationRequest& from);
  CommunicationRequest(CommunicationRequest&& from) noexcept
    : CommunicationRequest() {
    *this = ::std::move(from);
  }

  inline CommunicationRequest& operator=(const CommunicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationRequest& operator=(CommunicationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRequest* internal_default_instance() {
    return reinterpret_cast<const CommunicationRequest*>(
               &_CommunicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CommunicationRequest& a, CommunicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRequest* New() const final {
    return CreateMaybeMessage<CommunicationRequest>(nullptr);
  }

  CommunicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationRequest& from);
  void MergeFrom(const CommunicationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommunicationRequest";
  }
  protected:
  explicit CommunicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kContentFieldNumber = 3,
    kMessageIdFieldNumber = 4,
    kMd5FieldNumber = 6,
    kMsgTypeFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string target_id = 2;
  void clear_target_id();
  const std::string& target_id() const;
  void set_target_id(const std::string& value);
  void set_target_id(std::string&& value);
  void set_target_id(const char* value);
  void set_target_id(const char* value, size_t size);
  std::string* mutable_target_id();
  std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_id(
      std::string* target_id);
  private:
  const std::string& _internal_target_id() const;
  void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();
  public:

  // bytes content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string message_id = 4;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // string md5 = 6;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_md5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_md5(
      std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // int32 msg_type = 5;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CommunicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CommunicationRespond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommunicationRespond) */ {
 public:
  inline CommunicationRespond() : CommunicationRespond(nullptr) {};
  virtual ~CommunicationRespond();

  CommunicationRespond(const CommunicationRespond& from);
  CommunicationRespond(CommunicationRespond&& from) noexcept
    : CommunicationRespond() {
    *this = ::std::move(from);
  }

  inline CommunicationRespond& operator=(const CommunicationRespond& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationRespond& operator=(CommunicationRespond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationRespond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRespond* internal_default_instance() {
    return reinterpret_cast<const CommunicationRespond*>(
               &_CommunicationRespond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CommunicationRespond& a, CommunicationRespond& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationRespond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationRespond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRespond* New() const final {
    return CreateMaybeMessage<CommunicationRespond>(nullptr);
  }

  CommunicationRespond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRespond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationRespond& from);
  void MergeFrom(const CommunicationRespond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRespond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommunicationRespond";
  }
  protected:
  explicit CommunicationRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_IM_5flogin_2eproto);
    return ::descriptor_table_IM_5flogin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // bool result = 2;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CommunicationRespond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_5flogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientId

// string id = 1;
inline void ClientId::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientId::id() const {
  // @@protoc_insertion_point(field_get:ClientId.id)
  return _internal_id();
}
inline void ClientId::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ClientId.id)
}
inline std::string* ClientId::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ClientId.id)
  return _internal_mutable_id();
}
inline const std::string& ClientId::_internal_id() const {
  return id_.Get();
}
inline void ClientId::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientId::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClientId.id)
}
inline void ClientId::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ClientId.id)
}
inline void ClientId::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClientId.id)
}
inline std::string* ClientId::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientId::release_id() {
  // @@protoc_insertion_point(field_release:ClientId.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientId::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClientId.id)
}
inline std::string* ClientId::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientId.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientId::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientId.id)
}

// -------------------------------------------------------------------

// LoginRequest

// string account = 1;
inline void LoginRequest::clear_account() {
  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::account() const {
  // @@protoc_insertion_point(field_get:LoginRequest.account)
  return _internal_account();
}
inline void LoginRequest::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:LoginRequest.account)
}
inline std::string* LoginRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.account)
  return _internal_mutable_account();
}
inline const std::string& LoginRequest::_internal_account() const {
  return account_.Get();
}
inline void LoginRequest::_internal_set_account(const std::string& value) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_account(std::string&& value) {
  
  account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.account)
}
inline void LoginRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginRequest.account)
}
inline void LoginRequest::set_account(const char* value,
    size_t size) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.account)
}
inline std::string* LoginRequest::_internal_mutable_account() {
  
  return account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_account() {
  // @@protoc_insertion_point(field_release:LoginRequest.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.account)
}
inline std::string* LoginRequest::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginRequest.account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_account(
    std::string* account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account != nullptr) {
    
  } else {
    
  }
  account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginRequest.account)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:LoginRequest.password)
  return _internal_password();
}
inline void LoginRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:LoginRequest.password)
  return _internal_mutable_password();
}
inline const std::string& LoginRequest::_internal_password() const {
  return password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.password)
}
inline std::string* LoginRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:LoginRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.password)
}
inline std::string* LoginRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginRequest.password)
}

// -------------------------------------------------------------------

// RegisterRequest

// string username = 1;
inline void RegisterRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::username() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.username)
  return _internal_username();
}
inline void RegisterRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.username)
}
inline std::string* RegisterRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.username)
  return _internal_mutable_username();
}
inline const std::string& RegisterRequest::_internal_username() const {
  return username_.Get();
}
inline void RegisterRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.username)
}
inline void RegisterRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.username)
}
inline void RegisterRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.username)
}
inline std::string* RegisterRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_username() {
  // @@protoc_insertion_point(field_release:RegisterRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.username)
}
inline std::string* RegisterRequest::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.username)
}

// string password = 2;
inline void RegisterRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.password)
  return _internal_password();
}
inline void RegisterRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.password)
}
inline std::string* RegisterRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.password)
  return _internal_mutable_password();
}
inline const std::string& RegisterRequest::_internal_password() const {
  return password_.Get();
}
inline void RegisterRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.password)
}
inline void RegisterRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.password)
}
inline void RegisterRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.password)
}
inline std::string* RegisterRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_password() {
  // @@protoc_insertion_point(field_release:RegisterRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.password)
}
inline std::string* RegisterRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.password)
}

// string email = 3;
inline void RegisterRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::email() const {
  // @@protoc_insertion_point(field_get:RegisterRequest.email)
  return _internal_email();
}
inline void RegisterRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:RegisterRequest.email)
}
inline std::string* RegisterRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:RegisterRequest.email)
  return _internal_mutable_email();
}
inline const std::string& RegisterRequest::_internal_email() const {
  return email_.Get();
}
inline void RegisterRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequest.email)
}
inline void RegisterRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RegisterRequest.email)
}
inline void RegisterRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RegisterRequest.email)
}
inline std::string* RegisterRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_email() {
  // @@protoc_insertion_point(field_release:RegisterRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RegisterRequest.email)
}
inline std::string* RegisterRequest::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RegisterRequest.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RegisterRequest.email)
}

// -------------------------------------------------------------------

// SearchRequest

// .SearchRequest.State st = 1;
inline void SearchRequest::clear_st() {
  st_ = 0;
}
inline ::SearchRequest_State SearchRequest::_internal_st() const {
  return static_cast< ::SearchRequest_State >(st_);
}
inline ::SearchRequest_State SearchRequest::st() const {
  // @@protoc_insertion_point(field_get:SearchRequest.st)
  return _internal_st();
}
inline void SearchRequest::_internal_set_st(::SearchRequest_State value) {
  
  st_ = value;
}
inline void SearchRequest::set_st(::SearchRequest_State value) {
  _internal_set_st(value);
  // @@protoc_insertion_point(field_set:SearchRequest.st)
}

// .SearchRequest.Way way = 2;
inline void SearchRequest::clear_way() {
  way_ = 0;
}
inline ::SearchRequest_Way SearchRequest::_internal_way() const {
  return static_cast< ::SearchRequest_Way >(way_);
}
inline ::SearchRequest_Way SearchRequest::way() const {
  // @@protoc_insertion_point(field_get:SearchRequest.way)
  return _internal_way();
}
inline void SearchRequest::_internal_set_way(::SearchRequest_Way value) {
  
  way_ = value;
}
inline void SearchRequest::set_way(::SearchRequest_Way value) {
  _internal_set_way(value);
  // @@protoc_insertion_point(field_set:SearchRequest.way)
}

// string content = 3;
inline void SearchRequest::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchRequest::content() const {
  // @@protoc_insertion_point(field_get:SearchRequest.content)
  return _internal_content();
}
inline void SearchRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:SearchRequest.content)
}
inline std::string* SearchRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:SearchRequest.content)
  return _internal_mutable_content();
}
inline const std::string& SearchRequest::_internal_content() const {
  return content_.Get();
}
inline void SearchRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchRequest::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SearchRequest.content)
}
inline void SearchRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SearchRequest.content)
}
inline void SearchRequest::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SearchRequest.content)
}
inline std::string* SearchRequest::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchRequest::release_content() {
  // @@protoc_insertion_point(field_release:SearchRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SearchRequest.content)
}
inline std::string* SearchRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SearchRequest.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchRequest::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SearchRequest.content)
}

// -------------------------------------------------------------------

// AddRequest

// .AddRequest.State st = 1;
inline void AddRequest::clear_st() {
  st_ = 0;
}
inline ::AddRequest_State AddRequest::_internal_st() const {
  return static_cast< ::AddRequest_State >(st_);
}
inline ::AddRequest_State AddRequest::st() const {
  // @@protoc_insertion_point(field_get:AddRequest.st)
  return _internal_st();
}
inline void AddRequest::_internal_set_st(::AddRequest_State value) {
  
  st_ = value;
}
inline void AddRequest::set_st(::AddRequest_State value) {
  _internal_set_st(value);
  // @@protoc_insertion_point(field_set:AddRequest.st)
}

// string user_id = 2;
inline void AddRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRequest::user_id() const {
  // @@protoc_insertion_point(field_get:AddRequest.user_id)
  return _internal_user_id();
}
inline void AddRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:AddRequest.user_id)
}
inline std::string* AddRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:AddRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& AddRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void AddRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddRequest.user_id)
}
inline void AddRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AddRequest.user_id)
}
inline void AddRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddRequest.user_id)
}
inline std::string* AddRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:AddRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddRequest.user_id)
}
inline std::string* AddRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AddRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AddRequest.user_id)
}

// string friend_id = 3;
inline void AddRequest::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:AddRequest.friend_id)
  return _internal_friend_id();
}
inline void AddRequest::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:AddRequest.friend_id)
}
inline std::string* AddRequest::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:AddRequest.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& AddRequest::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void AddRequest::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddRequest::set_friend_id(std::string&& value) {
  
  friend_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddRequest.friend_id)
}
inline void AddRequest::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AddRequest.friend_id)
}
inline void AddRequest::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddRequest.friend_id)
}
inline std::string* AddRequest::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddRequest::release_friend_id() {
  // @@protoc_insertion_point(field_release:AddRequest.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRequest::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddRequest.friend_id)
}
inline std::string* AddRequest::unsafe_arena_release_friend_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AddRequest.friend_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return friend_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AddRequest::unsafe_arena_set_allocated_friend_id(
    std::string* friend_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      friend_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AddRequest.friend_id)
}

// -------------------------------------------------------------------

// ApplyRequest

// string user_id = 1;
inline void ApplyRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplyRequest::user_id() const {
  // @@protoc_insertion_point(field_get:ApplyRequest.user_id)
  return _internal_user_id();
}
inline void ApplyRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ApplyRequest.user_id)
}
inline std::string* ApplyRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:ApplyRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ApplyRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void ApplyRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplyRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ApplyRequest.user_id)
}
inline void ApplyRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ApplyRequest.user_id)
}
inline void ApplyRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ApplyRequest.user_id)
}
inline std::string* ApplyRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplyRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:ApplyRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ApplyRequest.user_id)
}
inline std::string* ApplyRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ApplyRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ApplyRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ApplyRequest.user_id)
}

// -------------------------------------------------------------------

// UpdateRelationship

// string user_id = 1;
inline void UpdateRelationship::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRelationship::user_id() const {
  // @@protoc_insertion_point(field_get:UpdateRelationship.user_id)
  return _internal_user_id();
}
inline void UpdateRelationship::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:UpdateRelationship.user_id)
}
inline std::string* UpdateRelationship::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:UpdateRelationship.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UpdateRelationship::_internal_user_id() const {
  return user_id_.Get();
}
inline void UpdateRelationship::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRelationship::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateRelationship.user_id)
}
inline void UpdateRelationship::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateRelationship.user_id)
}
inline void UpdateRelationship::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateRelationship.user_id)
}
inline std::string* UpdateRelationship::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRelationship::release_user_id() {
  // @@protoc_insertion_point(field_release:UpdateRelationship.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRelationship::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateRelationship.user_id)
}
inline std::string* UpdateRelationship::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateRelationship.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRelationship::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateRelationship.user_id)
}

// string friend_id = 2;
inline void UpdateRelationship::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRelationship::friend_id() const {
  // @@protoc_insertion_point(field_get:UpdateRelationship.friend_id)
  return _internal_friend_id();
}
inline void UpdateRelationship::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:UpdateRelationship.friend_id)
}
inline std::string* UpdateRelationship::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:UpdateRelationship.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& UpdateRelationship::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void UpdateRelationship::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRelationship::set_friend_id(std::string&& value) {
  
  friend_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateRelationship.friend_id)
}
inline void UpdateRelationship::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateRelationship.friend_id)
}
inline void UpdateRelationship::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateRelationship.friend_id)
}
inline std::string* UpdateRelationship::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRelationship::release_friend_id() {
  // @@protoc_insertion_point(field_release:UpdateRelationship.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRelationship::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateRelationship.friend_id)
}
inline std::string* UpdateRelationship::unsafe_arena_release_friend_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateRelationship.friend_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return friend_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRelationship::unsafe_arena_set_allocated_friend_id(
    std::string* friend_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      friend_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateRelationship.friend_id)
}

// bool result = 3;
inline void UpdateRelationship::clear_result() {
  result_ = false;
}
inline bool UpdateRelationship::_internal_result() const {
  return result_;
}
inline bool UpdateRelationship::result() const {
  // @@protoc_insertion_point(field_get:UpdateRelationship.result)
  return _internal_result();
}
inline void UpdateRelationship::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void UpdateRelationship::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:UpdateRelationship.result)
}

// -------------------------------------------------------------------

// UserInfoRequest

// string user_id = 1;
inline void UserInfoRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfoRequest::user_id() const {
  // @@protoc_insertion_point(field_get:UserInfoRequest.user_id)
  return _internal_user_id();
}
inline void UserInfoRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:UserInfoRequest.user_id)
}
inline std::string* UserInfoRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:UserInfoRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserInfoRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserInfoRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfoRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRequest.user_id)
}
inline void UserInfoRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRequest.user_id)
}
inline void UserInfoRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRequest.user_id)
}
inline std::string* UserInfoRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfoRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:UserInfoRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRequest.user_id)
}
inline std::string* UserInfoRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserInfoRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfoRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserInfoRequest.user_id)
}

// -------------------------------------------------------------------

// FriendListRequest

// string user_id = 1;
inline void FriendListRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendListRequest::user_id() const {
  // @@protoc_insertion_point(field_get:FriendListRequest.user_id)
  return _internal_user_id();
}
inline void FriendListRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:FriendListRequest.user_id)
}
inline std::string* FriendListRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:FriendListRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& FriendListRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void FriendListRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendListRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FriendListRequest.user_id)
}
inline void FriendListRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FriendListRequest.user_id)
}
inline void FriendListRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FriendListRequest.user_id)
}
inline std::string* FriendListRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendListRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:FriendListRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendListRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FriendListRequest.user_id)
}
inline std::string* FriendListRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FriendListRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendListRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FriendListRequest.user_id)
}

// -------------------------------------------------------------------

// addImageRequest

// string md5 = 1;
inline void addImageRequest::clear_md5() {
  md5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& addImageRequest::md5() const {
  // @@protoc_insertion_point(field_get:addImageRequest.md5)
  return _internal_md5();
}
inline void addImageRequest::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:addImageRequest.md5)
}
inline std::string* addImageRequest::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:addImageRequest.md5)
  return _internal_mutable_md5();
}
inline const std::string& addImageRequest::_internal_md5() const {
  return md5_.Get();
}
inline void addImageRequest::_internal_set_md5(const std::string& value) {
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void addImageRequest::set_md5(std::string&& value) {
  
  md5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:addImageRequest.md5)
}
inline void addImageRequest::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:addImageRequest.md5)
}
inline void addImageRequest::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:addImageRequest.md5)
}
inline std::string* addImageRequest::_internal_mutable_md5() {
  
  return md5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* addImageRequest::release_md5() {
  // @@protoc_insertion_point(field_release:addImageRequest.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addImageRequest::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:addImageRequest.md5)
}
inline std::string* addImageRequest::unsafe_arena_release_md5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:addImageRequest.md5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return md5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void addImageRequest::unsafe_arena_set_allocated_md5(
    std::string* md5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      md5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:addImageRequest.md5)
}

// bytes img_data = 2;
inline void addImageRequest::clear_img_data() {
  img_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& addImageRequest::img_data() const {
  // @@protoc_insertion_point(field_get:addImageRequest.img_data)
  return _internal_img_data();
}
inline void addImageRequest::set_img_data(const std::string& value) {
  _internal_set_img_data(value);
  // @@protoc_insertion_point(field_set:addImageRequest.img_data)
}
inline std::string* addImageRequest::mutable_img_data() {
  // @@protoc_insertion_point(field_mutable:addImageRequest.img_data)
  return _internal_mutable_img_data();
}
inline const std::string& addImageRequest::_internal_img_data() const {
  return img_data_.Get();
}
inline void addImageRequest::_internal_set_img_data(const std::string& value) {
  
  img_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void addImageRequest::set_img_data(std::string&& value) {
  
  img_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:addImageRequest.img_data)
}
inline void addImageRequest::set_img_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  img_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:addImageRequest.img_data)
}
inline void addImageRequest::set_img_data(const void* value,
    size_t size) {
  
  img_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:addImageRequest.img_data)
}
inline std::string* addImageRequest::_internal_mutable_img_data() {
  
  return img_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* addImageRequest::release_img_data() {
  // @@protoc_insertion_point(field_release:addImageRequest.img_data)
  return img_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addImageRequest::set_allocated_img_data(std::string* img_data) {
  if (img_data != nullptr) {
    
  } else {
    
  }
  img_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:addImageRequest.img_data)
}
inline std::string* addImageRequest::unsafe_arena_release_img_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:addImageRequest.img_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return img_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void addImageRequest::unsafe_arena_set_allocated_img_data(
    std::string* img_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (img_data != nullptr) {
    
  } else {
    
  }
  img_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      img_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:addImageRequest.img_data)
}

// -------------------------------------------------------------------

// GetImageRequest

// string md5 = 1;
inline void GetImageRequest::clear_md5() {
  md5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetImageRequest::md5() const {
  // @@protoc_insertion_point(field_get:GetImageRequest.md5)
  return _internal_md5();
}
inline void GetImageRequest::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:GetImageRequest.md5)
}
inline std::string* GetImageRequest::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:GetImageRequest.md5)
  return _internal_mutable_md5();
}
inline const std::string& GetImageRequest::_internal_md5() const {
  return md5_.Get();
}
inline void GetImageRequest::_internal_set_md5(const std::string& value) {
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetImageRequest::set_md5(std::string&& value) {
  
  md5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetImageRequest.md5)
}
inline void GetImageRequest::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetImageRequest.md5)
}
inline void GetImageRequest::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetImageRequest.md5)
}
inline std::string* GetImageRequest::_internal_mutable_md5() {
  
  return md5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetImageRequest::release_md5() {
  // @@protoc_insertion_point(field_release:GetImageRequest.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetImageRequest::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetImageRequest.md5)
}
inline std::string* GetImageRequest::unsafe_arena_release_md5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GetImageRequest.md5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return md5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetImageRequest::unsafe_arena_set_allocated_md5(
    std::string* md5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      md5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetImageRequest.md5)
}

// -------------------------------------------------------------------

// deleteFriendRequest

// string cur = 1;
inline void deleteFriendRequest::clear_cur() {
  cur_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& deleteFriendRequest::cur() const {
  // @@protoc_insertion_point(field_get:deleteFriendRequest.cur)
  return _internal_cur();
}
inline void deleteFriendRequest::set_cur(const std::string& value) {
  _internal_set_cur(value);
  // @@protoc_insertion_point(field_set:deleteFriendRequest.cur)
}
inline std::string* deleteFriendRequest::mutable_cur() {
  // @@protoc_insertion_point(field_mutable:deleteFriendRequest.cur)
  return _internal_mutable_cur();
}
inline const std::string& deleteFriendRequest::_internal_cur() const {
  return cur_.Get();
}
inline void deleteFriendRequest::_internal_set_cur(const std::string& value) {
  
  cur_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void deleteFriendRequest::set_cur(std::string&& value) {
  
  cur_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:deleteFriendRequest.cur)
}
inline void deleteFriendRequest::set_cur(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cur_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:deleteFriendRequest.cur)
}
inline void deleteFriendRequest::set_cur(const char* value,
    size_t size) {
  
  cur_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:deleteFriendRequest.cur)
}
inline std::string* deleteFriendRequest::_internal_mutable_cur() {
  
  return cur_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* deleteFriendRequest::release_cur() {
  // @@protoc_insertion_point(field_release:deleteFriendRequest.cur)
  return cur_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void deleteFriendRequest::set_allocated_cur(std::string* cur) {
  if (cur != nullptr) {
    
  } else {
    
  }
  cur_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:deleteFriendRequest.cur)
}
inline std::string* deleteFriendRequest::unsafe_arena_release_cur() {
  // @@protoc_insertion_point(field_unsafe_arena_release:deleteFriendRequest.cur)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cur_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void deleteFriendRequest::unsafe_arena_set_allocated_cur(
    std::string* cur) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cur != nullptr) {
    
  } else {
    
  }
  cur_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cur, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deleteFriendRequest.cur)
}

// string tar = 2;
inline void deleteFriendRequest::clear_tar() {
  tar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& deleteFriendRequest::tar() const {
  // @@protoc_insertion_point(field_get:deleteFriendRequest.tar)
  return _internal_tar();
}
inline void deleteFriendRequest::set_tar(const std::string& value) {
  _internal_set_tar(value);
  // @@protoc_insertion_point(field_set:deleteFriendRequest.tar)
}
inline std::string* deleteFriendRequest::mutable_tar() {
  // @@protoc_insertion_point(field_mutable:deleteFriendRequest.tar)
  return _internal_mutable_tar();
}
inline const std::string& deleteFriendRequest::_internal_tar() const {
  return tar_.Get();
}
inline void deleteFriendRequest::_internal_set_tar(const std::string& value) {
  
  tar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void deleteFriendRequest::set_tar(std::string&& value) {
  
  tar_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:deleteFriendRequest.tar)
}
inline void deleteFriendRequest::set_tar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:deleteFriendRequest.tar)
}
inline void deleteFriendRequest::set_tar(const char* value,
    size_t size) {
  
  tar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:deleteFriendRequest.tar)
}
inline std::string* deleteFriendRequest::_internal_mutable_tar() {
  
  return tar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* deleteFriendRequest::release_tar() {
  // @@protoc_insertion_point(field_release:deleteFriendRequest.tar)
  return tar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void deleteFriendRequest::set_allocated_tar(std::string* tar) {
  if (tar != nullptr) {
    
  } else {
    
  }
  tar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:deleteFriendRequest.tar)
}
inline std::string* deleteFriendRequest::unsafe_arena_release_tar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:deleteFriendRequest.tar)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void deleteFriendRequest::unsafe_arena_set_allocated_tar(
    std::string* tar) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tar != nullptr) {
    
  } else {
    
  }
  tar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tar, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:deleteFriendRequest.tar)
}

// -------------------------------------------------------------------

// PullRequest

// .LoginRequest login_request = 1;
inline bool PullRequest::_internal_has_login_request() const {
  return request_type_case() == kLoginRequest;
}
inline bool PullRequest::has_login_request() const {
  return _internal_has_login_request();
}
inline void PullRequest::set_has_login_request() {
  _oneof_case_[0] = kLoginRequest;
}
inline void PullRequest::clear_login_request() {
  if (_internal_has_login_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.login_request_;
    }
    clear_has_request_type();
  }
}
inline ::LoginRequest* PullRequest::release_login_request() {
  // @@protoc_insertion_point(field_release:PullRequest.login_request)
  if (_internal_has_login_request()) {
    clear_has_request_type();
      ::LoginRequest* temp = request_type_.login_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginRequest& PullRequest::_internal_login_request() const {
  return _internal_has_login_request()
      ? *request_type_.login_request_
      : *reinterpret_cast< ::LoginRequest*>(&::_LoginRequest_default_instance_);
}
inline const ::LoginRequest& PullRequest::login_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.login_request)
  return _internal_login_request();
}
inline ::LoginRequest* PullRequest::unsafe_arena_release_login_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.login_request)
  if (_internal_has_login_request()) {
    clear_has_request_type();
    ::LoginRequest* temp = request_type_.login_request_;
    request_type_.login_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_login_request(::LoginRequest* login_request) {
  clear_request_type();
  if (login_request) {
    set_has_login_request();
    request_type_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.login_request)
}
inline ::LoginRequest* PullRequest::_internal_mutable_login_request() {
  if (!_internal_has_login_request()) {
    clear_request_type();
    set_has_login_request();
    request_type_.login_request_ = CreateMaybeMessage< ::LoginRequest >(GetArena());
  }
  return request_type_.login_request_;
}
inline ::LoginRequest* PullRequest::mutable_login_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.login_request)
  return _internal_mutable_login_request();
}

// .RegisterRequest register_request = 2;
inline bool PullRequest::_internal_has_register_request() const {
  return request_type_case() == kRegisterRequest;
}
inline bool PullRequest::has_register_request() const {
  return _internal_has_register_request();
}
inline void PullRequest::set_has_register_request() {
  _oneof_case_[0] = kRegisterRequest;
}
inline void PullRequest::clear_register_request() {
  if (_internal_has_register_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.register_request_;
    }
    clear_has_request_type();
  }
}
inline ::RegisterRequest* PullRequest::release_register_request() {
  // @@protoc_insertion_point(field_release:PullRequest.register_request)
  if (_internal_has_register_request()) {
    clear_has_request_type();
      ::RegisterRequest* temp = request_type_.register_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.register_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RegisterRequest& PullRequest::_internal_register_request() const {
  return _internal_has_register_request()
      ? *request_type_.register_request_
      : *reinterpret_cast< ::RegisterRequest*>(&::_RegisterRequest_default_instance_);
}
inline const ::RegisterRequest& PullRequest::register_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.register_request)
  return _internal_register_request();
}
inline ::RegisterRequest* PullRequest::unsafe_arena_release_register_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.register_request)
  if (_internal_has_register_request()) {
    clear_has_request_type();
    ::RegisterRequest* temp = request_type_.register_request_;
    request_type_.register_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_register_request(::RegisterRequest* register_request) {
  clear_request_type();
  if (register_request) {
    set_has_register_request();
    request_type_.register_request_ = register_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.register_request)
}
inline ::RegisterRequest* PullRequest::_internal_mutable_register_request() {
  if (!_internal_has_register_request()) {
    clear_request_type();
    set_has_register_request();
    request_type_.register_request_ = CreateMaybeMessage< ::RegisterRequest >(GetArena());
  }
  return request_type_.register_request_;
}
inline ::RegisterRequest* PullRequest::mutable_register_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.register_request)
  return _internal_mutable_register_request();
}

// .ClientId client_id = 3;
inline bool PullRequest::_internal_has_client_id() const {
  return request_type_case() == kClientId;
}
inline bool PullRequest::has_client_id() const {
  return _internal_has_client_id();
}
inline void PullRequest::set_has_client_id() {
  _oneof_case_[0] = kClientId;
}
inline void PullRequest::clear_client_id() {
  if (_internal_has_client_id()) {
    if (GetArena() == nullptr) {
      delete request_type_.client_id_;
    }
    clear_has_request_type();
  }
}
inline ::ClientId* PullRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:PullRequest.client_id)
  if (_internal_has_client_id()) {
    clear_has_request_type();
      ::ClientId* temp = request_type_.client_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.client_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ClientId& PullRequest::_internal_client_id() const {
  return _internal_has_client_id()
      ? *request_type_.client_id_
      : *reinterpret_cast< ::ClientId*>(&::_ClientId_default_instance_);
}
inline const ::ClientId& PullRequest::client_id() const {
  // @@protoc_insertion_point(field_get:PullRequest.client_id)
  return _internal_client_id();
}
inline ::ClientId* PullRequest::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.client_id)
  if (_internal_has_client_id()) {
    clear_has_request_type();
    ::ClientId* temp = request_type_.client_id_;
    request_type_.client_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_client_id(::ClientId* client_id) {
  clear_request_type();
  if (client_id) {
    set_has_client_id();
    request_type_.client_id_ = client_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.client_id)
}
inline ::ClientId* PullRequest::_internal_mutable_client_id() {
  if (!_internal_has_client_id()) {
    clear_request_type();
    set_has_client_id();
    request_type_.client_id_ = CreateMaybeMessage< ::ClientId >(GetArena());
  }
  return request_type_.client_id_;
}
inline ::ClientId* PullRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:PullRequest.client_id)
  return _internal_mutable_client_id();
}

// .UpdateImaRequest ima_request = 4;
inline bool PullRequest::_internal_has_ima_request() const {
  return request_type_case() == kImaRequest;
}
inline bool PullRequest::has_ima_request() const {
  return _internal_has_ima_request();
}
inline void PullRequest::set_has_ima_request() {
  _oneof_case_[0] = kImaRequest;
}
inline void PullRequest::clear_ima_request() {
  if (_internal_has_ima_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.ima_request_;
    }
    clear_has_request_type();
  }
}
inline ::UpdateImaRequest* PullRequest::release_ima_request() {
  // @@protoc_insertion_point(field_release:PullRequest.ima_request)
  if (_internal_has_ima_request()) {
    clear_has_request_type();
      ::UpdateImaRequest* temp = request_type_.ima_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.ima_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateImaRequest& PullRequest::_internal_ima_request() const {
  return _internal_has_ima_request()
      ? *request_type_.ima_request_
      : *reinterpret_cast< ::UpdateImaRequest*>(&::_UpdateImaRequest_default_instance_);
}
inline const ::UpdateImaRequest& PullRequest::ima_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.ima_request)
  return _internal_ima_request();
}
inline ::UpdateImaRequest* PullRequest::unsafe_arena_release_ima_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.ima_request)
  if (_internal_has_ima_request()) {
    clear_has_request_type();
    ::UpdateImaRequest* temp = request_type_.ima_request_;
    request_type_.ima_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_ima_request(::UpdateImaRequest* ima_request) {
  clear_request_type();
  if (ima_request) {
    set_has_ima_request();
    request_type_.ima_request_ = ima_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.ima_request)
}
inline ::UpdateImaRequest* PullRequest::_internal_mutable_ima_request() {
  if (!_internal_has_ima_request()) {
    clear_request_type();
    set_has_ima_request();
    request_type_.ima_request_ = CreateMaybeMessage< ::UpdateImaRequest >(GetArena());
  }
  return request_type_.ima_request_;
}
inline ::UpdateImaRequest* PullRequest::mutable_ima_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.ima_request)
  return _internal_mutable_ima_request();
}

// .SearchRequest search_request = 5;
inline bool PullRequest::_internal_has_search_request() const {
  return request_type_case() == kSearchRequest;
}
inline bool PullRequest::has_search_request() const {
  return _internal_has_search_request();
}
inline void PullRequest::set_has_search_request() {
  _oneof_case_[0] = kSearchRequest;
}
inline void PullRequest::clear_search_request() {
  if (_internal_has_search_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.search_request_;
    }
    clear_has_request_type();
  }
}
inline ::SearchRequest* PullRequest::release_search_request() {
  // @@protoc_insertion_point(field_release:PullRequest.search_request)
  if (_internal_has_search_request()) {
    clear_has_request_type();
      ::SearchRequest* temp = request_type_.search_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.search_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SearchRequest& PullRequest::_internal_search_request() const {
  return _internal_has_search_request()
      ? *request_type_.search_request_
      : *reinterpret_cast< ::SearchRequest*>(&::_SearchRequest_default_instance_);
}
inline const ::SearchRequest& PullRequest::search_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.search_request)
  return _internal_search_request();
}
inline ::SearchRequest* PullRequest::unsafe_arena_release_search_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.search_request)
  if (_internal_has_search_request()) {
    clear_has_request_type();
    ::SearchRequest* temp = request_type_.search_request_;
    request_type_.search_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_search_request(::SearchRequest* search_request) {
  clear_request_type();
  if (search_request) {
    set_has_search_request();
    request_type_.search_request_ = search_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.search_request)
}
inline ::SearchRequest* PullRequest::_internal_mutable_search_request() {
  if (!_internal_has_search_request()) {
    clear_request_type();
    set_has_search_request();
    request_type_.search_request_ = CreateMaybeMessage< ::SearchRequest >(GetArena());
  }
  return request_type_.search_request_;
}
inline ::SearchRequest* PullRequest::mutable_search_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.search_request)
  return _internal_mutable_search_request();
}

// .AddRequest add_request = 6;
inline bool PullRequest::_internal_has_add_request() const {
  return request_type_case() == kAddRequest;
}
inline bool PullRequest::has_add_request() const {
  return _internal_has_add_request();
}
inline void PullRequest::set_has_add_request() {
  _oneof_case_[0] = kAddRequest;
}
inline void PullRequest::clear_add_request() {
  if (_internal_has_add_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.add_request_;
    }
    clear_has_request_type();
  }
}
inline ::AddRequest* PullRequest::release_add_request() {
  // @@protoc_insertion_point(field_release:PullRequest.add_request)
  if (_internal_has_add_request()) {
    clear_has_request_type();
      ::AddRequest* temp = request_type_.add_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.add_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AddRequest& PullRequest::_internal_add_request() const {
  return _internal_has_add_request()
      ? *request_type_.add_request_
      : *reinterpret_cast< ::AddRequest*>(&::_AddRequest_default_instance_);
}
inline const ::AddRequest& PullRequest::add_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.add_request)
  return _internal_add_request();
}
inline ::AddRequest* PullRequest::unsafe_arena_release_add_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.add_request)
  if (_internal_has_add_request()) {
    clear_has_request_type();
    ::AddRequest* temp = request_type_.add_request_;
    request_type_.add_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_add_request(::AddRequest* add_request) {
  clear_request_type();
  if (add_request) {
    set_has_add_request();
    request_type_.add_request_ = add_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.add_request)
}
inline ::AddRequest* PullRequest::_internal_mutable_add_request() {
  if (!_internal_has_add_request()) {
    clear_request_type();
    set_has_add_request();
    request_type_.add_request_ = CreateMaybeMessage< ::AddRequest >(GetArena());
  }
  return request_type_.add_request_;
}
inline ::AddRequest* PullRequest::mutable_add_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.add_request)
  return _internal_mutable_add_request();
}

// .ApplyRequest apply_request = 7;
inline bool PullRequest::_internal_has_apply_request() const {
  return request_type_case() == kApplyRequest;
}
inline bool PullRequest::has_apply_request() const {
  return _internal_has_apply_request();
}
inline void PullRequest::set_has_apply_request() {
  _oneof_case_[0] = kApplyRequest;
}
inline void PullRequest::clear_apply_request() {
  if (_internal_has_apply_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.apply_request_;
    }
    clear_has_request_type();
  }
}
inline ::ApplyRequest* PullRequest::release_apply_request() {
  // @@protoc_insertion_point(field_release:PullRequest.apply_request)
  if (_internal_has_apply_request()) {
    clear_has_request_type();
      ::ApplyRequest* temp = request_type_.apply_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.apply_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ApplyRequest& PullRequest::_internal_apply_request() const {
  return _internal_has_apply_request()
      ? *request_type_.apply_request_
      : *reinterpret_cast< ::ApplyRequest*>(&::_ApplyRequest_default_instance_);
}
inline const ::ApplyRequest& PullRequest::apply_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.apply_request)
  return _internal_apply_request();
}
inline ::ApplyRequest* PullRequest::unsafe_arena_release_apply_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.apply_request)
  if (_internal_has_apply_request()) {
    clear_has_request_type();
    ::ApplyRequest* temp = request_type_.apply_request_;
    request_type_.apply_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_apply_request(::ApplyRequest* apply_request) {
  clear_request_type();
  if (apply_request) {
    set_has_apply_request();
    request_type_.apply_request_ = apply_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.apply_request)
}
inline ::ApplyRequest* PullRequest::_internal_mutable_apply_request() {
  if (!_internal_has_apply_request()) {
    clear_request_type();
    set_has_apply_request();
    request_type_.apply_request_ = CreateMaybeMessage< ::ApplyRequest >(GetArena());
  }
  return request_type_.apply_request_;
}
inline ::ApplyRequest* PullRequest::mutable_apply_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.apply_request)
  return _internal_mutable_apply_request();
}

// .UpdateRelationship update_rela = 8;
inline bool PullRequest::_internal_has_update_rela() const {
  return request_type_case() == kUpdateRela;
}
inline bool PullRequest::has_update_rela() const {
  return _internal_has_update_rela();
}
inline void PullRequest::set_has_update_rela() {
  _oneof_case_[0] = kUpdateRela;
}
inline void PullRequest::clear_update_rela() {
  if (_internal_has_update_rela()) {
    if (GetArena() == nullptr) {
      delete request_type_.update_rela_;
    }
    clear_has_request_type();
  }
}
inline ::UpdateRelationship* PullRequest::release_update_rela() {
  // @@protoc_insertion_point(field_release:PullRequest.update_rela)
  if (_internal_has_update_rela()) {
    clear_has_request_type();
      ::UpdateRelationship* temp = request_type_.update_rela_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.update_rela_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateRelationship& PullRequest::_internal_update_rela() const {
  return _internal_has_update_rela()
      ? *request_type_.update_rela_
      : *reinterpret_cast< ::UpdateRelationship*>(&::_UpdateRelationship_default_instance_);
}
inline const ::UpdateRelationship& PullRequest::update_rela() const {
  // @@protoc_insertion_point(field_get:PullRequest.update_rela)
  return _internal_update_rela();
}
inline ::UpdateRelationship* PullRequest::unsafe_arena_release_update_rela() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.update_rela)
  if (_internal_has_update_rela()) {
    clear_has_request_type();
    ::UpdateRelationship* temp = request_type_.update_rela_;
    request_type_.update_rela_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_update_rela(::UpdateRelationship* update_rela) {
  clear_request_type();
  if (update_rela) {
    set_has_update_rela();
    request_type_.update_rela_ = update_rela;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.update_rela)
}
inline ::UpdateRelationship* PullRequest::_internal_mutable_update_rela() {
  if (!_internal_has_update_rela()) {
    clear_request_type();
    set_has_update_rela();
    request_type_.update_rela_ = CreateMaybeMessage< ::UpdateRelationship >(GetArena());
  }
  return request_type_.update_rela_;
}
inline ::UpdateRelationship* PullRequest::mutable_update_rela() {
  // @@protoc_insertion_point(field_mutable:PullRequest.update_rela)
  return _internal_mutable_update_rela();
}

// .UserInfoRequest user_info = 9;
inline bool PullRequest::_internal_has_user_info() const {
  return request_type_case() == kUserInfo;
}
inline bool PullRequest::has_user_info() const {
  return _internal_has_user_info();
}
inline void PullRequest::set_has_user_info() {
  _oneof_case_[0] = kUserInfo;
}
inline void PullRequest::clear_user_info() {
  if (_internal_has_user_info()) {
    if (GetArena() == nullptr) {
      delete request_type_.user_info_;
    }
    clear_has_request_type();
  }
}
inline ::UserInfoRequest* PullRequest::release_user_info() {
  // @@protoc_insertion_point(field_release:PullRequest.user_info)
  if (_internal_has_user_info()) {
    clear_has_request_type();
      ::UserInfoRequest* temp = request_type_.user_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UserInfoRequest& PullRequest::_internal_user_info() const {
  return _internal_has_user_info()
      ? *request_type_.user_info_
      : *reinterpret_cast< ::UserInfoRequest*>(&::_UserInfoRequest_default_instance_);
}
inline const ::UserInfoRequest& PullRequest::user_info() const {
  // @@protoc_insertion_point(field_get:PullRequest.user_info)
  return _internal_user_info();
}
inline ::UserInfoRequest* PullRequest::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.user_info)
  if (_internal_has_user_info()) {
    clear_has_request_type();
    ::UserInfoRequest* temp = request_type_.user_info_;
    request_type_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_user_info(::UserInfoRequest* user_info) {
  clear_request_type();
  if (user_info) {
    set_has_user_info();
    request_type_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.user_info)
}
inline ::UserInfoRequest* PullRequest::_internal_mutable_user_info() {
  if (!_internal_has_user_info()) {
    clear_request_type();
    set_has_user_info();
    request_type_.user_info_ = CreateMaybeMessage< ::UserInfoRequest >(GetArena());
  }
  return request_type_.user_info_;
}
inline ::UserInfoRequest* PullRequest::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:PullRequest.user_info)
  return _internal_mutable_user_info();
}

// .FriendListRequest friend_list = 10;
inline bool PullRequest::_internal_has_friend_list() const {
  return request_type_case() == kFriendList;
}
inline bool PullRequest::has_friend_list() const {
  return _internal_has_friend_list();
}
inline void PullRequest::set_has_friend_list() {
  _oneof_case_[0] = kFriendList;
}
inline void PullRequest::clear_friend_list() {
  if (_internal_has_friend_list()) {
    if (GetArena() == nullptr) {
      delete request_type_.friend_list_;
    }
    clear_has_request_type();
  }
}
inline ::FriendListRequest* PullRequest::release_friend_list() {
  // @@protoc_insertion_point(field_release:PullRequest.friend_list)
  if (_internal_has_friend_list()) {
    clear_has_request_type();
      ::FriendListRequest* temp = request_type_.friend_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.friend_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FriendListRequest& PullRequest::_internal_friend_list() const {
  return _internal_has_friend_list()
      ? *request_type_.friend_list_
      : *reinterpret_cast< ::FriendListRequest*>(&::_FriendListRequest_default_instance_);
}
inline const ::FriendListRequest& PullRequest::friend_list() const {
  // @@protoc_insertion_point(field_get:PullRequest.friend_list)
  return _internal_friend_list();
}
inline ::FriendListRequest* PullRequest::unsafe_arena_release_friend_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.friend_list)
  if (_internal_has_friend_list()) {
    clear_has_request_type();
    ::FriendListRequest* temp = request_type_.friend_list_;
    request_type_.friend_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_friend_list(::FriendListRequest* friend_list) {
  clear_request_type();
  if (friend_list) {
    set_has_friend_list();
    request_type_.friend_list_ = friend_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.friend_list)
}
inline ::FriendListRequest* PullRequest::_internal_mutable_friend_list() {
  if (!_internal_has_friend_list()) {
    clear_request_type();
    set_has_friend_list();
    request_type_.friend_list_ = CreateMaybeMessage< ::FriendListRequest >(GetArena());
  }
  return request_type_.friend_list_;
}
inline ::FriendListRequest* PullRequest::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable:PullRequest.friend_list)
  return _internal_mutable_friend_list();
}

// .CommunicationRequest communication = 11;
inline bool PullRequest::_internal_has_communication() const {
  return request_type_case() == kCommunication;
}
inline bool PullRequest::has_communication() const {
  return _internal_has_communication();
}
inline void PullRequest::set_has_communication() {
  _oneof_case_[0] = kCommunication;
}
inline void PullRequest::clear_communication() {
  if (_internal_has_communication()) {
    if (GetArena() == nullptr) {
      delete request_type_.communication_;
    }
    clear_has_request_type();
  }
}
inline ::CommunicationRequest* PullRequest::release_communication() {
  // @@protoc_insertion_point(field_release:PullRequest.communication)
  if (_internal_has_communication()) {
    clear_has_request_type();
      ::CommunicationRequest* temp = request_type_.communication_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.communication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CommunicationRequest& PullRequest::_internal_communication() const {
  return _internal_has_communication()
      ? *request_type_.communication_
      : *reinterpret_cast< ::CommunicationRequest*>(&::_CommunicationRequest_default_instance_);
}
inline const ::CommunicationRequest& PullRequest::communication() const {
  // @@protoc_insertion_point(field_get:PullRequest.communication)
  return _internal_communication();
}
inline ::CommunicationRequest* PullRequest::unsafe_arena_release_communication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.communication)
  if (_internal_has_communication()) {
    clear_has_request_type();
    ::CommunicationRequest* temp = request_type_.communication_;
    request_type_.communication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_communication(::CommunicationRequest* communication) {
  clear_request_type();
  if (communication) {
    set_has_communication();
    request_type_.communication_ = communication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.communication)
}
inline ::CommunicationRequest* PullRequest::_internal_mutable_communication() {
  if (!_internal_has_communication()) {
    clear_request_type();
    set_has_communication();
    request_type_.communication_ = CreateMaybeMessage< ::CommunicationRequest >(GetArena());
  }
  return request_type_.communication_;
}
inline ::CommunicationRequest* PullRequest::mutable_communication() {
  // @@protoc_insertion_point(field_mutable:PullRequest.communication)
  return _internal_mutable_communication();
}

// .offlineMsgRequest offline_request = 12;
inline bool PullRequest::_internal_has_offline_request() const {
  return request_type_case() == kOfflineRequest;
}
inline bool PullRequest::has_offline_request() const {
  return _internal_has_offline_request();
}
inline void PullRequest::set_has_offline_request() {
  _oneof_case_[0] = kOfflineRequest;
}
inline void PullRequest::clear_offline_request() {
  if (_internal_has_offline_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.offline_request_;
    }
    clear_has_request_type();
  }
}
inline ::offlineMsgRequest* PullRequest::release_offline_request() {
  // @@protoc_insertion_point(field_release:PullRequest.offline_request)
  if (_internal_has_offline_request()) {
    clear_has_request_type();
      ::offlineMsgRequest* temp = request_type_.offline_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.offline_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::offlineMsgRequest& PullRequest::_internal_offline_request() const {
  return _internal_has_offline_request()
      ? *request_type_.offline_request_
      : *reinterpret_cast< ::offlineMsgRequest*>(&::_offlineMsgRequest_default_instance_);
}
inline const ::offlineMsgRequest& PullRequest::offline_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.offline_request)
  return _internal_offline_request();
}
inline ::offlineMsgRequest* PullRequest::unsafe_arena_release_offline_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.offline_request)
  if (_internal_has_offline_request()) {
    clear_has_request_type();
    ::offlineMsgRequest* temp = request_type_.offline_request_;
    request_type_.offline_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_offline_request(::offlineMsgRequest* offline_request) {
  clear_request_type();
  if (offline_request) {
    set_has_offline_request();
    request_type_.offline_request_ = offline_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.offline_request)
}
inline ::offlineMsgRequest* PullRequest::_internal_mutable_offline_request() {
  if (!_internal_has_offline_request()) {
    clear_request_type();
    set_has_offline_request();
    request_type_.offline_request_ = CreateMaybeMessage< ::offlineMsgRequest >(GetArena());
  }
  return request_type_.offline_request_;
}
inline ::offlineMsgRequest* PullRequest::mutable_offline_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.offline_request)
  return _internal_mutable_offline_request();
}

// .heartCheck heart = 13;
inline bool PullRequest::_internal_has_heart() const {
  return request_type_case() == kHeart;
}
inline bool PullRequest::has_heart() const {
  return _internal_has_heart();
}
inline void PullRequest::set_has_heart() {
  _oneof_case_[0] = kHeart;
}
inline void PullRequest::clear_heart() {
  if (_internal_has_heart()) {
    if (GetArena() == nullptr) {
      delete request_type_.heart_;
    }
    clear_has_request_type();
  }
}
inline ::heartCheck* PullRequest::release_heart() {
  // @@protoc_insertion_point(field_release:PullRequest.heart)
  if (_internal_has_heart()) {
    clear_has_request_type();
      ::heartCheck* temp = request_type_.heart_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.heart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::heartCheck& PullRequest::_internal_heart() const {
  return _internal_has_heart()
      ? *request_type_.heart_
      : *reinterpret_cast< ::heartCheck*>(&::_heartCheck_default_instance_);
}
inline const ::heartCheck& PullRequest::heart() const {
  // @@protoc_insertion_point(field_get:PullRequest.heart)
  return _internal_heart();
}
inline ::heartCheck* PullRequest::unsafe_arena_release_heart() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.heart)
  if (_internal_has_heart()) {
    clear_has_request_type();
    ::heartCheck* temp = request_type_.heart_;
    request_type_.heart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_heart(::heartCheck* heart) {
  clear_request_type();
  if (heart) {
    set_has_heart();
    request_type_.heart_ = heart;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.heart)
}
inline ::heartCheck* PullRequest::_internal_mutable_heart() {
  if (!_internal_has_heart()) {
    clear_request_type();
    set_has_heart();
    request_type_.heart_ = CreateMaybeMessage< ::heartCheck >(GetArena());
  }
  return request_type_.heart_;
}
inline ::heartCheck* PullRequest::mutable_heart() {
  // @@protoc_insertion_point(field_mutable:PullRequest.heart)
  return _internal_mutable_heart();
}

// .GetImageRequest image_request = 14;
inline bool PullRequest::_internal_has_image_request() const {
  return request_type_case() == kImageRequest;
}
inline bool PullRequest::has_image_request() const {
  return _internal_has_image_request();
}
inline void PullRequest::set_has_image_request() {
  _oneof_case_[0] = kImageRequest;
}
inline void PullRequest::clear_image_request() {
  if (_internal_has_image_request()) {
    if (GetArena() == nullptr) {
      delete request_type_.image_request_;
    }
    clear_has_request_type();
  }
}
inline ::GetImageRequest* PullRequest::release_image_request() {
  // @@protoc_insertion_point(field_release:PullRequest.image_request)
  if (_internal_has_image_request()) {
    clear_has_request_type();
      ::GetImageRequest* temp = request_type_.image_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GetImageRequest& PullRequest::_internal_image_request() const {
  return _internal_has_image_request()
      ? *request_type_.image_request_
      : *reinterpret_cast< ::GetImageRequest*>(&::_GetImageRequest_default_instance_);
}
inline const ::GetImageRequest& PullRequest::image_request() const {
  // @@protoc_insertion_point(field_get:PullRequest.image_request)
  return _internal_image_request();
}
inline ::GetImageRequest* PullRequest::unsafe_arena_release_image_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.image_request)
  if (_internal_has_image_request()) {
    clear_has_request_type();
    ::GetImageRequest* temp = request_type_.image_request_;
    request_type_.image_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_image_request(::GetImageRequest* image_request) {
  clear_request_type();
  if (image_request) {
    set_has_image_request();
    request_type_.image_request_ = image_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.image_request)
}
inline ::GetImageRequest* PullRequest::_internal_mutable_image_request() {
  if (!_internal_has_image_request()) {
    clear_request_type();
    set_has_image_request();
    request_type_.image_request_ = CreateMaybeMessage< ::GetImageRequest >(GetArena());
  }
  return request_type_.image_request_;
}
inline ::GetImageRequest* PullRequest::mutable_image_request() {
  // @@protoc_insertion_point(field_mutable:PullRequest.image_request)
  return _internal_mutable_image_request();
}

// .addImageRequest add_image = 15;
inline bool PullRequest::_internal_has_add_image() const {
  return request_type_case() == kAddImage;
}
inline bool PullRequest::has_add_image() const {
  return _internal_has_add_image();
}
inline void PullRequest::set_has_add_image() {
  _oneof_case_[0] = kAddImage;
}
inline void PullRequest::clear_add_image() {
  if (_internal_has_add_image()) {
    if (GetArena() == nullptr) {
      delete request_type_.add_image_;
    }
    clear_has_request_type();
  }
}
inline ::addImageRequest* PullRequest::release_add_image() {
  // @@protoc_insertion_point(field_release:PullRequest.add_image)
  if (_internal_has_add_image()) {
    clear_has_request_type();
      ::addImageRequest* temp = request_type_.add_image_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.add_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::addImageRequest& PullRequest::_internal_add_image() const {
  return _internal_has_add_image()
      ? *request_type_.add_image_
      : *reinterpret_cast< ::addImageRequest*>(&::_addImageRequest_default_instance_);
}
inline const ::addImageRequest& PullRequest::add_image() const {
  // @@protoc_insertion_point(field_get:PullRequest.add_image)
  return _internal_add_image();
}
inline ::addImageRequest* PullRequest::unsafe_arena_release_add_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.add_image)
  if (_internal_has_add_image()) {
    clear_has_request_type();
    ::addImageRequest* temp = request_type_.add_image_;
    request_type_.add_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_add_image(::addImageRequest* add_image) {
  clear_request_type();
  if (add_image) {
    set_has_add_image();
    request_type_.add_image_ = add_image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.add_image)
}
inline ::addImageRequest* PullRequest::_internal_mutable_add_image() {
  if (!_internal_has_add_image()) {
    clear_request_type();
    set_has_add_image();
    request_type_.add_image_ = CreateMaybeMessage< ::addImageRequest >(GetArena());
  }
  return request_type_.add_image_;
}
inline ::addImageRequest* PullRequest::mutable_add_image() {
  // @@protoc_insertion_point(field_mutable:PullRequest.add_image)
  return _internal_mutable_add_image();
}

// .deleteFriendRequest delete_friend = 16;
inline bool PullRequest::_internal_has_delete_friend() const {
  return request_type_case() == kDeleteFriend;
}
inline bool PullRequest::has_delete_friend() const {
  return _internal_has_delete_friend();
}
inline void PullRequest::set_has_delete_friend() {
  _oneof_case_[0] = kDeleteFriend;
}
inline void PullRequest::clear_delete_friend() {
  if (_internal_has_delete_friend()) {
    if (GetArena() == nullptr) {
      delete request_type_.delete_friend_;
    }
    clear_has_request_type();
  }
}
inline ::deleteFriendRequest* PullRequest::release_delete_friend() {
  // @@protoc_insertion_point(field_release:PullRequest.delete_friend)
  if (_internal_has_delete_friend()) {
    clear_has_request_type();
      ::deleteFriendRequest* temp = request_type_.delete_friend_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.delete_friend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::deleteFriendRequest& PullRequest::_internal_delete_friend() const {
  return _internal_has_delete_friend()
      ? *request_type_.delete_friend_
      : *reinterpret_cast< ::deleteFriendRequest*>(&::_deleteFriendRequest_default_instance_);
}
inline const ::deleteFriendRequest& PullRequest::delete_friend() const {
  // @@protoc_insertion_point(field_get:PullRequest.delete_friend)
  return _internal_delete_friend();
}
inline ::deleteFriendRequest* PullRequest::unsafe_arena_release_delete_friend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRequest.delete_friend)
  if (_internal_has_delete_friend()) {
    clear_has_request_type();
    ::deleteFriendRequest* temp = request_type_.delete_friend_;
    request_type_.delete_friend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRequest::unsafe_arena_set_allocated_delete_friend(::deleteFriendRequest* delete_friend) {
  clear_request_type();
  if (delete_friend) {
    set_has_delete_friend();
    request_type_.delete_friend_ = delete_friend;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRequest.delete_friend)
}
inline ::deleteFriendRequest* PullRequest::_internal_mutable_delete_friend() {
  if (!_internal_has_delete_friend()) {
    clear_request_type();
    set_has_delete_friend();
    request_type_.delete_friend_ = CreateMaybeMessage< ::deleteFriendRequest >(GetArena());
  }
  return request_type_.delete_friend_;
}
inline ::deleteFriendRequest* PullRequest::mutable_delete_friend() {
  // @@protoc_insertion_point(field_mutable:PullRequest.delete_friend)
  return _internal_mutable_delete_friend();
}

inline bool PullRequest::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void PullRequest::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline PullRequest::RequestTypeCase PullRequest::request_type_case() const {
  return PullRequest::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserInfoRespond

// string account = 1;
inline void UserInfoRespond::clear_account() {
  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfoRespond::account() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.account)
  return _internal_account();
}
inline void UserInfoRespond::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.account)
}
inline std::string* UserInfoRespond::mutable_account() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.account)
  return _internal_mutable_account();
}
inline const std::string& UserInfoRespond::_internal_account() const {
  return account_.Get();
}
inline void UserInfoRespond::_internal_set_account(const std::string& value) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfoRespond::set_account(std::string&& value) {
  
  account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.account)
}
inline void UserInfoRespond::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.account)
}
inline void UserInfoRespond::set_account(const char* value,
    size_t size) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.account)
}
inline std::string* UserInfoRespond::_internal_mutable_account() {
  
  return account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfoRespond::release_account() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.account)
}
inline std::string* UserInfoRespond::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserInfoRespond.account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfoRespond::unsafe_arena_set_allocated_account(
    std::string* account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account != nullptr) {
    
  } else {
    
  }
  account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserInfoRespond.account)
}

// string name = 2;
inline void UserInfoRespond::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfoRespond::name() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.name)
  return _internal_name();
}
inline void UserInfoRespond::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.name)
}
inline std::string* UserInfoRespond::mutable_name() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.name)
  return _internal_mutable_name();
}
inline const std::string& UserInfoRespond::_internal_name() const {
  return name_.Get();
}
inline void UserInfoRespond::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfoRespond::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.name)
}
inline void UserInfoRespond::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.name)
}
inline void UserInfoRespond::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.name)
}
inline std::string* UserInfoRespond::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfoRespond::release_name() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.name)
}
inline std::string* UserInfoRespond::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserInfoRespond.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfoRespond::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserInfoRespond.name)
}

// string email = 3;
inline void UserInfoRespond::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfoRespond::email() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.email)
  return _internal_email();
}
inline void UserInfoRespond::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.email)
}
inline std::string* UserInfoRespond::mutable_email() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.email)
  return _internal_mutable_email();
}
inline const std::string& UserInfoRespond::_internal_email() const {
  return email_.Get();
}
inline void UserInfoRespond::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfoRespond::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.email)
}
inline void UserInfoRespond::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.email)
}
inline void UserInfoRespond::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.email)
}
inline std::string* UserInfoRespond::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfoRespond::release_email() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.email)
}
inline std::string* UserInfoRespond::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserInfoRespond.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfoRespond::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserInfoRespond.email)
}

// bytes image = 4;
inline void UserInfoRespond::clear_image() {
  image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfoRespond::image() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.image)
  return _internal_image();
}
inline void UserInfoRespond::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.image)
}
inline std::string* UserInfoRespond::mutable_image() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.image)
  return _internal_mutable_image();
}
inline const std::string& UserInfoRespond::_internal_image() const {
  return image_.Get();
}
inline void UserInfoRespond::_internal_set_image(const std::string& value) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfoRespond::set_image(std::string&& value) {
  
  image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.image)
}
inline void UserInfoRespond::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.image)
}
inline void UserInfoRespond::set_image(const void* value,
    size_t size) {
  
  image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.image)
}
inline std::string* UserInfoRespond::_internal_mutable_image() {
  
  return image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfoRespond::release_image() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.image)
}
inline std::string* UserInfoRespond::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserInfoRespond.image)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfoRespond::unsafe_arena_set_allocated_image(
    std::string* image) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image != nullptr) {
    
  } else {
    
  }
  image_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserInfoRespond.image)
}

// string createTime = 5;
inline void UserInfoRespond::clear_createtime() {
  createtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfoRespond::createtime() const {
  // @@protoc_insertion_point(field_get:UserInfoRespond.createTime)
  return _internal_createtime();
}
inline void UserInfoRespond::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:UserInfoRespond.createTime)
}
inline std::string* UserInfoRespond::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:UserInfoRespond.createTime)
  return _internal_mutable_createtime();
}
inline const std::string& UserInfoRespond::_internal_createtime() const {
  return createtime_.Get();
}
inline void UserInfoRespond::_internal_set_createtime(const std::string& value) {
  
  createtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfoRespond::set_createtime(std::string&& value) {
  
  createtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UserInfoRespond.createTime)
}
inline void UserInfoRespond::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UserInfoRespond.createTime)
}
inline void UserInfoRespond::set_createtime(const char* value,
    size_t size) {
  
  createtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UserInfoRespond.createTime)
}
inline std::string* UserInfoRespond::_internal_mutable_createtime() {
  
  return createtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfoRespond::release_createtime() {
  // @@protoc_insertion_point(field_release:UserInfoRespond.createTime)
  return createtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfoRespond::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UserInfoRespond.createTime)
}
inline std::string* UserInfoRespond::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UserInfoRespond.createTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return createtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfoRespond::unsafe_arena_set_allocated_createtime(
    std::string* createtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      createtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserInfoRespond.createTime)
}

// -------------------------------------------------------------------

// LoginARegisterRespond

// bool success = 1;
inline void LoginARegisterRespond::clear_success() {
  success_ = false;
}
inline bool LoginARegisterRespond::_internal_success() const {
  return success_;
}
inline bool LoginARegisterRespond::success() const {
  // @@protoc_insertion_point(field_get:LoginARegisterRespond.success)
  return _internal_success();
}
inline void LoginARegisterRespond::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LoginARegisterRespond::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:LoginARegisterRespond.success)
}

// string msg = 2;
inline void LoginARegisterRespond::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginARegisterRespond::msg() const {
  // @@protoc_insertion_point(field_get:LoginARegisterRespond.msg)
  return _internal_msg();
}
inline void LoginARegisterRespond::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:LoginARegisterRespond.msg)
}
inline std::string* LoginARegisterRespond::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:LoginARegisterRespond.msg)
  return _internal_mutable_msg();
}
inline const std::string& LoginARegisterRespond::_internal_msg() const {
  return msg_.Get();
}
inline void LoginARegisterRespond::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginARegisterRespond::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LoginARegisterRespond.msg)
}
inline void LoginARegisterRespond::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LoginARegisterRespond.msg)
}
inline void LoginARegisterRespond::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LoginARegisterRespond.msg)
}
inline std::string* LoginARegisterRespond::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginARegisterRespond::release_msg() {
  // @@protoc_insertion_point(field_release:LoginARegisterRespond.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginARegisterRespond::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LoginARegisterRespond.msg)
}
inline std::string* LoginARegisterRespond::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginARegisterRespond.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginARegisterRespond::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginARegisterRespond.msg)
}

// -------------------------------------------------------------------

// ApplyRespond

// repeated .ApplyInfo infos = 1;
inline int ApplyRespond::_internal_infos_size() const {
  return infos_.size();
}
inline int ApplyRespond::infos_size() const {
  return _internal_infos_size();
}
inline void ApplyRespond::clear_infos() {
  infos_.Clear();
}
inline ::ApplyInfo* ApplyRespond::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:ApplyRespond.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ApplyInfo >*
ApplyRespond::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:ApplyRespond.infos)
  return &infos_;
}
inline const ::ApplyInfo& ApplyRespond::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::ApplyInfo& ApplyRespond::infos(int index) const {
  // @@protoc_insertion_point(field_get:ApplyRespond.infos)
  return _internal_infos(index);
}
inline ::ApplyInfo* ApplyRespond::_internal_add_infos() {
  return infos_.Add();
}
inline ::ApplyInfo* ApplyRespond::add_infos() {
  // @@protoc_insertion_point(field_add:ApplyRespond.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ApplyInfo >&
ApplyRespond::infos() const {
  // @@protoc_insertion_point(field_list:ApplyRespond.infos)
  return infos_;
}

// -------------------------------------------------------------------

// ApplyInfo

// .FriendApply friend_apply = 1;
inline bool ApplyInfo::_internal_has_friend_apply() const {
  return request_type_case() == kFriendApply;
}
inline bool ApplyInfo::has_friend_apply() const {
  return _internal_has_friend_apply();
}
inline void ApplyInfo::set_has_friend_apply() {
  _oneof_case_[0] = kFriendApply;
}
inline void ApplyInfo::clear_friend_apply() {
  if (_internal_has_friend_apply()) {
    if (GetArena() == nullptr) {
      delete request_type_.friend_apply_;
    }
    clear_has_request_type();
  }
}
inline ::FriendApply* ApplyInfo::release_friend_apply() {
  // @@protoc_insertion_point(field_release:ApplyInfo.friend_apply)
  if (_internal_has_friend_apply()) {
    clear_has_request_type();
      ::FriendApply* temp = request_type_.friend_apply_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.friend_apply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FriendApply& ApplyInfo::_internal_friend_apply() const {
  return _internal_has_friend_apply()
      ? *request_type_.friend_apply_
      : *reinterpret_cast< ::FriendApply*>(&::_FriendApply_default_instance_);
}
inline const ::FriendApply& ApplyInfo::friend_apply() const {
  // @@protoc_insertion_point(field_get:ApplyInfo.friend_apply)
  return _internal_friend_apply();
}
inline ::FriendApply* ApplyInfo::unsafe_arena_release_friend_apply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ApplyInfo.friend_apply)
  if (_internal_has_friend_apply()) {
    clear_has_request_type();
    ::FriendApply* temp = request_type_.friend_apply_;
    request_type_.friend_apply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ApplyInfo::unsafe_arena_set_allocated_friend_apply(::FriendApply* friend_apply) {
  clear_request_type();
  if (friend_apply) {
    set_has_friend_apply();
    request_type_.friend_apply_ = friend_apply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ApplyInfo.friend_apply)
}
inline ::FriendApply* ApplyInfo::_internal_mutable_friend_apply() {
  if (!_internal_has_friend_apply()) {
    clear_request_type();
    set_has_friend_apply();
    request_type_.friend_apply_ = CreateMaybeMessage< ::FriendApply >(GetArena());
  }
  return request_type_.friend_apply_;
}
inline ::FriendApply* ApplyInfo::mutable_friend_apply() {
  // @@protoc_insertion_point(field_mutable:ApplyInfo.friend_apply)
  return _internal_mutable_friend_apply();
}

// string apply_time = 2;
inline void ApplyInfo::clear_apply_time() {
  apply_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ApplyInfo::apply_time() const {
  // @@protoc_insertion_point(field_get:ApplyInfo.apply_time)
  return _internal_apply_time();
}
inline void ApplyInfo::set_apply_time(const std::string& value) {
  _internal_set_apply_time(value);
  // @@protoc_insertion_point(field_set:ApplyInfo.apply_time)
}
inline std::string* ApplyInfo::mutable_apply_time() {
  // @@protoc_insertion_point(field_mutable:ApplyInfo.apply_time)
  return _internal_mutable_apply_time();
}
inline const std::string& ApplyInfo::_internal_apply_time() const {
  return apply_time_.Get();
}
inline void ApplyInfo::_internal_set_apply_time(const std::string& value) {
  
  apply_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ApplyInfo::set_apply_time(std::string&& value) {
  
  apply_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ApplyInfo.apply_time)
}
inline void ApplyInfo::set_apply_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apply_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ApplyInfo.apply_time)
}
inline void ApplyInfo::set_apply_time(const char* value,
    size_t size) {
  
  apply_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ApplyInfo.apply_time)
}
inline std::string* ApplyInfo::_internal_mutable_apply_time() {
  
  return apply_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ApplyInfo::release_apply_time() {
  // @@protoc_insertion_point(field_release:ApplyInfo.apply_time)
  return apply_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApplyInfo::set_allocated_apply_time(std::string* apply_time) {
  if (apply_time != nullptr) {
    
  } else {
    
  }
  apply_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apply_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ApplyInfo.apply_time)
}
inline std::string* ApplyInfo::unsafe_arena_release_apply_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ApplyInfo.apply_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return apply_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ApplyInfo::unsafe_arena_set_allocated_apply_time(
    std::string* apply_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (apply_time != nullptr) {
    
  } else {
    
  }
  apply_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      apply_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ApplyInfo.apply_time)
}

inline bool ApplyInfo::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void ApplyInfo::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline ApplyInfo::RequestTypeCase ApplyInfo::request_type_case() const {
  return ApplyInfo::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FriendApply

// string user_id = 1;
inline void FriendApply::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendApply::user_id() const {
  // @@protoc_insertion_point(field_get:FriendApply.user_id)
  return _internal_user_id();
}
inline void FriendApply::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:FriendApply.user_id)
}
inline std::string* FriendApply::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:FriendApply.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& FriendApply::_internal_user_id() const {
  return user_id_.Get();
}
inline void FriendApply::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendApply::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FriendApply.user_id)
}
inline void FriendApply::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FriendApply.user_id)
}
inline void FriendApply::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FriendApply.user_id)
}
inline std::string* FriendApply::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendApply::release_user_id() {
  // @@protoc_insertion_point(field_release:FriendApply.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendApply::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FriendApply.user_id)
}
inline std::string* FriendApply::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FriendApply.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendApply::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FriendApply.user_id)
}

// int32 state = 2;
inline void FriendApply::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendApply::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendApply::state() const {
  // @@protoc_insertion_point(field_get:FriendApply.state)
  return _internal_state();
}
inline void FriendApply::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void FriendApply::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:FriendApply.state)
}

// -------------------------------------------------------------------

// SearchInfo

// string account = 1;
inline void SearchInfo::clear_account() {
  account_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchInfo::account() const {
  // @@protoc_insertion_point(field_get:SearchInfo.account)
  return _internal_account();
}
inline void SearchInfo::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:SearchInfo.account)
}
inline std::string* SearchInfo::mutable_account() {
  // @@protoc_insertion_point(field_mutable:SearchInfo.account)
  return _internal_mutable_account();
}
inline const std::string& SearchInfo::_internal_account() const {
  return account_.Get();
}
inline void SearchInfo::_internal_set_account(const std::string& value) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchInfo::set_account(std::string&& value) {
  
  account_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SearchInfo.account)
}
inline void SearchInfo::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SearchInfo.account)
}
inline void SearchInfo::set_account(const char* value,
    size_t size) {
  
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SearchInfo.account)
}
inline std::string* SearchInfo::_internal_mutable_account() {
  
  return account_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchInfo::release_account() {
  // @@protoc_insertion_point(field_release:SearchInfo.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchInfo::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SearchInfo.account)
}
inline std::string* SearchInfo::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SearchInfo.account)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchInfo::unsafe_arena_set_allocated_account(
    std::string* account) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account != nullptr) {
    
  } else {
    
  }
  account_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SearchInfo.account)
}

// string name = 2;
inline void SearchInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchInfo::name() const {
  // @@protoc_insertion_point(field_get:SearchInfo.name)
  return _internal_name();
}
inline void SearchInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SearchInfo.name)
}
inline std::string* SearchInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SearchInfo.name)
  return _internal_mutable_name();
}
inline const std::string& SearchInfo::_internal_name() const {
  return name_.Get();
}
inline void SearchInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SearchInfo.name)
}
inline void SearchInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SearchInfo.name)
}
inline void SearchInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SearchInfo.name)
}
inline std::string* SearchInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchInfo::release_name() {
  // @@protoc_insertion_point(field_release:SearchInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SearchInfo.name)
}
inline std::string* SearchInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SearchInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SearchInfo.name)
}

// -------------------------------------------------------------------

// SearchRespond

// repeated .SearchInfo infos = 1;
inline int SearchRespond::_internal_infos_size() const {
  return infos_.size();
}
inline int SearchRespond::infos_size() const {
  return _internal_infos_size();
}
inline void SearchRespond::clear_infos() {
  infos_.Clear();
}
inline ::SearchInfo* SearchRespond::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:SearchRespond.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchInfo >*
SearchRespond::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:SearchRespond.infos)
  return &infos_;
}
inline const ::SearchInfo& SearchRespond::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::SearchInfo& SearchRespond::infos(int index) const {
  // @@protoc_insertion_point(field_get:SearchRespond.infos)
  return _internal_infos(index);
}
inline ::SearchInfo* SearchRespond::_internal_add_infos() {
  return infos_.Add();
}
inline ::SearchInfo* SearchRespond::add_infos() {
  // @@protoc_insertion_point(field_add:SearchRespond.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchInfo >&
SearchRespond::infos() const {
  // @@protoc_insertion_point(field_list:SearchRespond.infos)
  return infos_;
}

// -------------------------------------------------------------------

// AddRespond

// bool result = 1;
inline void AddRespond::clear_result() {
  result_ = false;
}
inline bool AddRespond::_internal_result() const {
  return result_;
}
inline bool AddRespond::result() const {
  // @@protoc_insertion_point(field_get:AddRespond.result)
  return _internal_result();
}
inline void AddRespond::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void AddRespond::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:AddRespond.result)
}

// -------------------------------------------------------------------

// FriendListRespond

// repeated string user_id = 1;
inline int FriendListRespond::_internal_user_id_size() const {
  return user_id_.size();
}
inline int FriendListRespond::user_id_size() const {
  return _internal_user_id_size();
}
inline void FriendListRespond::clear_user_id() {
  user_id_.Clear();
}
inline std::string* FriendListRespond::add_user_id() {
  // @@protoc_insertion_point(field_add_mutable:FriendListRespond.user_id)
  return _internal_add_user_id();
}
inline const std::string& FriendListRespond::_internal_user_id(int index) const {
  return user_id_.Get(index);
}
inline const std::string& FriendListRespond::user_id(int index) const {
  // @@protoc_insertion_point(field_get:FriendListRespond.user_id)
  return _internal_user_id(index);
}
inline std::string* FriendListRespond::mutable_user_id(int index) {
  // @@protoc_insertion_point(field_mutable:FriendListRespond.user_id)
  return user_id_.Mutable(index);
}
inline void FriendListRespond::set_user_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FriendListRespond.user_id)
  user_id_.Mutable(index)->assign(value);
}
inline void FriendListRespond::set_user_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FriendListRespond.user_id)
  user_id_.Mutable(index)->assign(std::move(value));
}
inline void FriendListRespond::set_user_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FriendListRespond.user_id)
}
inline void FriendListRespond::set_user_id(int index, const char* value, size_t size) {
  user_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FriendListRespond.user_id)
}
inline std::string* FriendListRespond::_internal_add_user_id() {
  return user_id_.Add();
}
inline void FriendListRespond::add_user_id(const std::string& value) {
  user_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FriendListRespond.user_id)
}
inline void FriendListRespond::add_user_id(std::string&& value) {
  user_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FriendListRespond.user_id)
}
inline void FriendListRespond::add_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FriendListRespond.user_id)
}
inline void FriendListRespond::add_user_id(const char* value, size_t size) {
  user_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FriendListRespond.user_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FriendListRespond::user_id() const {
  // @@protoc_insertion_point(field_list:FriendListRespond.user_id)
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FriendListRespond::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:FriendListRespond.user_id)
  return &user_id_;
}

// -------------------------------------------------------------------

// GetImageRespond

// bytes img_data = 1;
inline void GetImageRespond::clear_img_data() {
  img_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetImageRespond::img_data() const {
  // @@protoc_insertion_point(field_get:GetImageRespond.img_data)
  return _internal_img_data();
}
inline void GetImageRespond::set_img_data(const std::string& value) {
  _internal_set_img_data(value);
  // @@protoc_insertion_point(field_set:GetImageRespond.img_data)
}
inline std::string* GetImageRespond::mutable_img_data() {
  // @@protoc_insertion_point(field_mutable:GetImageRespond.img_data)
  return _internal_mutable_img_data();
}
inline const std::string& GetImageRespond::_internal_img_data() const {
  return img_data_.Get();
}
inline void GetImageRespond::_internal_set_img_data(const std::string& value) {
  
  img_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetImageRespond::set_img_data(std::string&& value) {
  
  img_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetImageRespond.img_data)
}
inline void GetImageRespond::set_img_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  img_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GetImageRespond.img_data)
}
inline void GetImageRespond::set_img_data(const void* value,
    size_t size) {
  
  img_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetImageRespond.img_data)
}
inline std::string* GetImageRespond::_internal_mutable_img_data() {
  
  return img_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetImageRespond::release_img_data() {
  // @@protoc_insertion_point(field_release:GetImageRespond.img_data)
  return img_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetImageRespond::set_allocated_img_data(std::string* img_data) {
  if (img_data != nullptr) {
    
  } else {
    
  }
  img_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetImageRespond.img_data)
}
inline std::string* GetImageRespond::unsafe_arena_release_img_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GetImageRespond.img_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return img_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetImageRespond::unsafe_arena_set_allocated_img_data(
    std::string* img_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (img_data != nullptr) {
    
  } else {
    
  }
  img_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      img_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetImageRespond.img_data)
}

// -------------------------------------------------------------------

// addImageRespond

// bool result = 1;
inline void addImageRespond::clear_result() {
  result_ = false;
}
inline bool addImageRespond::_internal_result() const {
  return result_;
}
inline bool addImageRespond::result() const {
  // @@protoc_insertion_point(field_get:addImageRespond.result)
  return _internal_result();
}
inline void addImageRespond::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void addImageRespond::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:addImageRespond.result)
}

// -------------------------------------------------------------------

// deleteFriendRespond

// bool result = 1;
inline void deleteFriendRespond::clear_result() {
  result_ = false;
}
inline bool deleteFriendRespond::_internal_result() const {
  return result_;
}
inline bool deleteFriendRespond::result() const {
  // @@protoc_insertion_point(field_get:deleteFriendRespond.result)
  return _internal_result();
}
inline void deleteFriendRespond::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void deleteFriendRespond::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:deleteFriendRespond.result)
}

// -------------------------------------------------------------------

// PullRespond

// .LoginARegisterRespond lginReg_respond = 1;
inline bool PullRespond::_internal_has_lginreg_respond() const {
  return request_type_case() == kLginRegRespond;
}
inline bool PullRespond::has_lginreg_respond() const {
  return _internal_has_lginreg_respond();
}
inline void PullRespond::set_has_lginreg_respond() {
  _oneof_case_[0] = kLginRegRespond;
}
inline void PullRespond::clear_lginreg_respond() {
  if (_internal_has_lginreg_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.lginreg_respond_;
    }
    clear_has_request_type();
  }
}
inline ::LoginARegisterRespond* PullRespond::release_lginreg_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.lginReg_respond)
  if (_internal_has_lginreg_respond()) {
    clear_has_request_type();
      ::LoginARegisterRespond* temp = request_type_.lginreg_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.lginreg_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::LoginARegisterRespond& PullRespond::_internal_lginreg_respond() const {
  return _internal_has_lginreg_respond()
      ? *request_type_.lginreg_respond_
      : *reinterpret_cast< ::LoginARegisterRespond*>(&::_LoginARegisterRespond_default_instance_);
}
inline const ::LoginARegisterRespond& PullRespond::lginreg_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.lginReg_respond)
  return _internal_lginreg_respond();
}
inline ::LoginARegisterRespond* PullRespond::unsafe_arena_release_lginreg_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.lginReg_respond)
  if (_internal_has_lginreg_respond()) {
    clear_has_request_type();
    ::LoginARegisterRespond* temp = request_type_.lginreg_respond_;
    request_type_.lginreg_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_lginreg_respond(::LoginARegisterRespond* lginreg_respond) {
  clear_request_type();
  if (lginreg_respond) {
    set_has_lginreg_respond();
    request_type_.lginreg_respond_ = lginreg_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.lginReg_respond)
}
inline ::LoginARegisterRespond* PullRespond::_internal_mutable_lginreg_respond() {
  if (!_internal_has_lginreg_respond()) {
    clear_request_type();
    set_has_lginreg_respond();
    request_type_.lginreg_respond_ = CreateMaybeMessage< ::LoginARegisterRespond >(GetArena());
  }
  return request_type_.lginreg_respond_;
}
inline ::LoginARegisterRespond* PullRespond::mutable_lginreg_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.lginReg_respond)
  return _internal_mutable_lginreg_respond();
}

// .UpdateImaRespond ima_respond = 2;
inline bool PullRespond::_internal_has_ima_respond() const {
  return request_type_case() == kImaRespond;
}
inline bool PullRespond::has_ima_respond() const {
  return _internal_has_ima_respond();
}
inline void PullRespond::set_has_ima_respond() {
  _oneof_case_[0] = kImaRespond;
}
inline void PullRespond::clear_ima_respond() {
  if (_internal_has_ima_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.ima_respond_;
    }
    clear_has_request_type();
  }
}
inline ::UpdateImaRespond* PullRespond::release_ima_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.ima_respond)
  if (_internal_has_ima_respond()) {
    clear_has_request_type();
      ::UpdateImaRespond* temp = request_type_.ima_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.ima_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateImaRespond& PullRespond::_internal_ima_respond() const {
  return _internal_has_ima_respond()
      ? *request_type_.ima_respond_
      : *reinterpret_cast< ::UpdateImaRespond*>(&::_UpdateImaRespond_default_instance_);
}
inline const ::UpdateImaRespond& PullRespond::ima_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.ima_respond)
  return _internal_ima_respond();
}
inline ::UpdateImaRespond* PullRespond::unsafe_arena_release_ima_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.ima_respond)
  if (_internal_has_ima_respond()) {
    clear_has_request_type();
    ::UpdateImaRespond* temp = request_type_.ima_respond_;
    request_type_.ima_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_ima_respond(::UpdateImaRespond* ima_respond) {
  clear_request_type();
  if (ima_respond) {
    set_has_ima_respond();
    request_type_.ima_respond_ = ima_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.ima_respond)
}
inline ::UpdateImaRespond* PullRespond::_internal_mutable_ima_respond() {
  if (!_internal_has_ima_respond()) {
    clear_request_type();
    set_has_ima_respond();
    request_type_.ima_respond_ = CreateMaybeMessage< ::UpdateImaRespond >(GetArena());
  }
  return request_type_.ima_respond_;
}
inline ::UpdateImaRespond* PullRespond::mutable_ima_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.ima_respond)
  return _internal_mutable_ima_respond();
}

// .SearchRespond search_respond = 3;
inline bool PullRespond::_internal_has_search_respond() const {
  return request_type_case() == kSearchRespond;
}
inline bool PullRespond::has_search_respond() const {
  return _internal_has_search_respond();
}
inline void PullRespond::set_has_search_respond() {
  _oneof_case_[0] = kSearchRespond;
}
inline void PullRespond::clear_search_respond() {
  if (_internal_has_search_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.search_respond_;
    }
    clear_has_request_type();
  }
}
inline ::SearchRespond* PullRespond::release_search_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.search_respond)
  if (_internal_has_search_respond()) {
    clear_has_request_type();
      ::SearchRespond* temp = request_type_.search_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.search_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SearchRespond& PullRespond::_internal_search_respond() const {
  return _internal_has_search_respond()
      ? *request_type_.search_respond_
      : *reinterpret_cast< ::SearchRespond*>(&::_SearchRespond_default_instance_);
}
inline const ::SearchRespond& PullRespond::search_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.search_respond)
  return _internal_search_respond();
}
inline ::SearchRespond* PullRespond::unsafe_arena_release_search_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.search_respond)
  if (_internal_has_search_respond()) {
    clear_has_request_type();
    ::SearchRespond* temp = request_type_.search_respond_;
    request_type_.search_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_search_respond(::SearchRespond* search_respond) {
  clear_request_type();
  if (search_respond) {
    set_has_search_respond();
    request_type_.search_respond_ = search_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.search_respond)
}
inline ::SearchRespond* PullRespond::_internal_mutable_search_respond() {
  if (!_internal_has_search_respond()) {
    clear_request_type();
    set_has_search_respond();
    request_type_.search_respond_ = CreateMaybeMessage< ::SearchRespond >(GetArena());
  }
  return request_type_.search_respond_;
}
inline ::SearchRespond* PullRespond::mutable_search_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.search_respond)
  return _internal_mutable_search_respond();
}

// .AddRespond add_respond = 4;
inline bool PullRespond::_internal_has_add_respond() const {
  return request_type_case() == kAddRespond;
}
inline bool PullRespond::has_add_respond() const {
  return _internal_has_add_respond();
}
inline void PullRespond::set_has_add_respond() {
  _oneof_case_[0] = kAddRespond;
}
inline void PullRespond::clear_add_respond() {
  if (_internal_has_add_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.add_respond_;
    }
    clear_has_request_type();
  }
}
inline ::AddRespond* PullRespond::release_add_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.add_respond)
  if (_internal_has_add_respond()) {
    clear_has_request_type();
      ::AddRespond* temp = request_type_.add_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.add_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AddRespond& PullRespond::_internal_add_respond() const {
  return _internal_has_add_respond()
      ? *request_type_.add_respond_
      : *reinterpret_cast< ::AddRespond*>(&::_AddRespond_default_instance_);
}
inline const ::AddRespond& PullRespond::add_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.add_respond)
  return _internal_add_respond();
}
inline ::AddRespond* PullRespond::unsafe_arena_release_add_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.add_respond)
  if (_internal_has_add_respond()) {
    clear_has_request_type();
    ::AddRespond* temp = request_type_.add_respond_;
    request_type_.add_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_add_respond(::AddRespond* add_respond) {
  clear_request_type();
  if (add_respond) {
    set_has_add_respond();
    request_type_.add_respond_ = add_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.add_respond)
}
inline ::AddRespond* PullRespond::_internal_mutable_add_respond() {
  if (!_internal_has_add_respond()) {
    clear_request_type();
    set_has_add_respond();
    request_type_.add_respond_ = CreateMaybeMessage< ::AddRespond >(GetArena());
  }
  return request_type_.add_respond_;
}
inline ::AddRespond* PullRespond::mutable_add_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.add_respond)
  return _internal_mutable_add_respond();
}

// .ServerMsg server_msg = 5;
inline bool PullRespond::_internal_has_server_msg() const {
  return request_type_case() == kServerMsg;
}
inline bool PullRespond::has_server_msg() const {
  return _internal_has_server_msg();
}
inline void PullRespond::set_has_server_msg() {
  _oneof_case_[0] = kServerMsg;
}
inline void PullRespond::clear_server_msg() {
  if (_internal_has_server_msg()) {
    if (GetArena() == nullptr) {
      delete request_type_.server_msg_;
    }
    clear_has_request_type();
  }
}
inline ::ServerMsg* PullRespond::release_server_msg() {
  // @@protoc_insertion_point(field_release:PullRespond.server_msg)
  if (_internal_has_server_msg()) {
    clear_has_request_type();
      ::ServerMsg* temp = request_type_.server_msg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.server_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerMsg& PullRespond::_internal_server_msg() const {
  return _internal_has_server_msg()
      ? *request_type_.server_msg_
      : *reinterpret_cast< ::ServerMsg*>(&::_ServerMsg_default_instance_);
}
inline const ::ServerMsg& PullRespond::server_msg() const {
  // @@protoc_insertion_point(field_get:PullRespond.server_msg)
  return _internal_server_msg();
}
inline ::ServerMsg* PullRespond::unsafe_arena_release_server_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.server_msg)
  if (_internal_has_server_msg()) {
    clear_has_request_type();
    ::ServerMsg* temp = request_type_.server_msg_;
    request_type_.server_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_server_msg(::ServerMsg* server_msg) {
  clear_request_type();
  if (server_msg) {
    set_has_server_msg();
    request_type_.server_msg_ = server_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.server_msg)
}
inline ::ServerMsg* PullRespond::_internal_mutable_server_msg() {
  if (!_internal_has_server_msg()) {
    clear_request_type();
    set_has_server_msg();
    request_type_.server_msg_ = CreateMaybeMessage< ::ServerMsg >(GetArena());
  }
  return request_type_.server_msg_;
}
inline ::ServerMsg* PullRespond::mutable_server_msg() {
  // @@protoc_insertion_point(field_mutable:PullRespond.server_msg)
  return _internal_mutable_server_msg();
}

// .ApplyRespond apply_respond = 6;
inline bool PullRespond::_internal_has_apply_respond() const {
  return request_type_case() == kApplyRespond;
}
inline bool PullRespond::has_apply_respond() const {
  return _internal_has_apply_respond();
}
inline void PullRespond::set_has_apply_respond() {
  _oneof_case_[0] = kApplyRespond;
}
inline void PullRespond::clear_apply_respond() {
  if (_internal_has_apply_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.apply_respond_;
    }
    clear_has_request_type();
  }
}
inline ::ApplyRespond* PullRespond::release_apply_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.apply_respond)
  if (_internal_has_apply_respond()) {
    clear_has_request_type();
      ::ApplyRespond* temp = request_type_.apply_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.apply_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ApplyRespond& PullRespond::_internal_apply_respond() const {
  return _internal_has_apply_respond()
      ? *request_type_.apply_respond_
      : *reinterpret_cast< ::ApplyRespond*>(&::_ApplyRespond_default_instance_);
}
inline const ::ApplyRespond& PullRespond::apply_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.apply_respond)
  return _internal_apply_respond();
}
inline ::ApplyRespond* PullRespond::unsafe_arena_release_apply_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.apply_respond)
  if (_internal_has_apply_respond()) {
    clear_has_request_type();
    ::ApplyRespond* temp = request_type_.apply_respond_;
    request_type_.apply_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_apply_respond(::ApplyRespond* apply_respond) {
  clear_request_type();
  if (apply_respond) {
    set_has_apply_respond();
    request_type_.apply_respond_ = apply_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.apply_respond)
}
inline ::ApplyRespond* PullRespond::_internal_mutable_apply_respond() {
  if (!_internal_has_apply_respond()) {
    clear_request_type();
    set_has_apply_respond();
    request_type_.apply_respond_ = CreateMaybeMessage< ::ApplyRespond >(GetArena());
  }
  return request_type_.apply_respond_;
}
inline ::ApplyRespond* PullRespond::mutable_apply_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.apply_respond)
  return _internal_mutable_apply_respond();
}

// .UpdateRelationship update_rela = 7;
inline bool PullRespond::_internal_has_update_rela() const {
  return request_type_case() == kUpdateRela;
}
inline bool PullRespond::has_update_rela() const {
  return _internal_has_update_rela();
}
inline void PullRespond::set_has_update_rela() {
  _oneof_case_[0] = kUpdateRela;
}
inline void PullRespond::clear_update_rela() {
  if (_internal_has_update_rela()) {
    if (GetArena() == nullptr) {
      delete request_type_.update_rela_;
    }
    clear_has_request_type();
  }
}
inline ::UpdateRelationship* PullRespond::release_update_rela() {
  // @@protoc_insertion_point(field_release:PullRespond.update_rela)
  if (_internal_has_update_rela()) {
    clear_has_request_type();
      ::UpdateRelationship* temp = request_type_.update_rela_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.update_rela_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UpdateRelationship& PullRespond::_internal_update_rela() const {
  return _internal_has_update_rela()
      ? *request_type_.update_rela_
      : *reinterpret_cast< ::UpdateRelationship*>(&::_UpdateRelationship_default_instance_);
}
inline const ::UpdateRelationship& PullRespond::update_rela() const {
  // @@protoc_insertion_point(field_get:PullRespond.update_rela)
  return _internal_update_rela();
}
inline ::UpdateRelationship* PullRespond::unsafe_arena_release_update_rela() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.update_rela)
  if (_internal_has_update_rela()) {
    clear_has_request_type();
    ::UpdateRelationship* temp = request_type_.update_rela_;
    request_type_.update_rela_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_update_rela(::UpdateRelationship* update_rela) {
  clear_request_type();
  if (update_rela) {
    set_has_update_rela();
    request_type_.update_rela_ = update_rela;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.update_rela)
}
inline ::UpdateRelationship* PullRespond::_internal_mutable_update_rela() {
  if (!_internal_has_update_rela()) {
    clear_request_type();
    set_has_update_rela();
    request_type_.update_rela_ = CreateMaybeMessage< ::UpdateRelationship >(GetArena());
  }
  return request_type_.update_rela_;
}
inline ::UpdateRelationship* PullRespond::mutable_update_rela() {
  // @@protoc_insertion_point(field_mutable:PullRespond.update_rela)
  return _internal_mutable_update_rela();
}

// .UserInfoRespond user_info = 8;
inline bool PullRespond::_internal_has_user_info() const {
  return request_type_case() == kUserInfo;
}
inline bool PullRespond::has_user_info() const {
  return _internal_has_user_info();
}
inline void PullRespond::set_has_user_info() {
  _oneof_case_[0] = kUserInfo;
}
inline void PullRespond::clear_user_info() {
  if (_internal_has_user_info()) {
    if (GetArena() == nullptr) {
      delete request_type_.user_info_;
    }
    clear_has_request_type();
  }
}
inline ::UserInfoRespond* PullRespond::release_user_info() {
  // @@protoc_insertion_point(field_release:PullRespond.user_info)
  if (_internal_has_user_info()) {
    clear_has_request_type();
      ::UserInfoRespond* temp = request_type_.user_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::UserInfoRespond& PullRespond::_internal_user_info() const {
  return _internal_has_user_info()
      ? *request_type_.user_info_
      : *reinterpret_cast< ::UserInfoRespond*>(&::_UserInfoRespond_default_instance_);
}
inline const ::UserInfoRespond& PullRespond::user_info() const {
  // @@protoc_insertion_point(field_get:PullRespond.user_info)
  return _internal_user_info();
}
inline ::UserInfoRespond* PullRespond::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.user_info)
  if (_internal_has_user_info()) {
    clear_has_request_type();
    ::UserInfoRespond* temp = request_type_.user_info_;
    request_type_.user_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_user_info(::UserInfoRespond* user_info) {
  clear_request_type();
  if (user_info) {
    set_has_user_info();
    request_type_.user_info_ = user_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.user_info)
}
inline ::UserInfoRespond* PullRespond::_internal_mutable_user_info() {
  if (!_internal_has_user_info()) {
    clear_request_type();
    set_has_user_info();
    request_type_.user_info_ = CreateMaybeMessage< ::UserInfoRespond >(GetArena());
  }
  return request_type_.user_info_;
}
inline ::UserInfoRespond* PullRespond::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:PullRespond.user_info)
  return _internal_mutable_user_info();
}

// .FriendListRespond friend_list = 9;
inline bool PullRespond::_internal_has_friend_list() const {
  return request_type_case() == kFriendList;
}
inline bool PullRespond::has_friend_list() const {
  return _internal_has_friend_list();
}
inline void PullRespond::set_has_friend_list() {
  _oneof_case_[0] = kFriendList;
}
inline void PullRespond::clear_friend_list() {
  if (_internal_has_friend_list()) {
    if (GetArena() == nullptr) {
      delete request_type_.friend_list_;
    }
    clear_has_request_type();
  }
}
inline ::FriendListRespond* PullRespond::release_friend_list() {
  // @@protoc_insertion_point(field_release:PullRespond.friend_list)
  if (_internal_has_friend_list()) {
    clear_has_request_type();
      ::FriendListRespond* temp = request_type_.friend_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.friend_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FriendListRespond& PullRespond::_internal_friend_list() const {
  return _internal_has_friend_list()
      ? *request_type_.friend_list_
      : *reinterpret_cast< ::FriendListRespond*>(&::_FriendListRespond_default_instance_);
}
inline const ::FriendListRespond& PullRespond::friend_list() const {
  // @@protoc_insertion_point(field_get:PullRespond.friend_list)
  return _internal_friend_list();
}
inline ::FriendListRespond* PullRespond::unsafe_arena_release_friend_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.friend_list)
  if (_internal_has_friend_list()) {
    clear_has_request_type();
    ::FriendListRespond* temp = request_type_.friend_list_;
    request_type_.friend_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_friend_list(::FriendListRespond* friend_list) {
  clear_request_type();
  if (friend_list) {
    set_has_friend_list();
    request_type_.friend_list_ = friend_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.friend_list)
}
inline ::FriendListRespond* PullRespond::_internal_mutable_friend_list() {
  if (!_internal_has_friend_list()) {
    clear_request_type();
    set_has_friend_list();
    request_type_.friend_list_ = CreateMaybeMessage< ::FriendListRespond >(GetArena());
  }
  return request_type_.friend_list_;
}
inline ::FriendListRespond* PullRespond::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable:PullRespond.friend_list)
  return _internal_mutable_friend_list();
}

// .CommunicationRespond communication = 10;
inline bool PullRespond::_internal_has_communication() const {
  return request_type_case() == kCommunication;
}
inline bool PullRespond::has_communication() const {
  return _internal_has_communication();
}
inline void PullRespond::set_has_communication() {
  _oneof_case_[0] = kCommunication;
}
inline void PullRespond::clear_communication() {
  if (_internal_has_communication()) {
    if (GetArena() == nullptr) {
      delete request_type_.communication_;
    }
    clear_has_request_type();
  }
}
inline ::CommunicationRespond* PullRespond::release_communication() {
  // @@protoc_insertion_point(field_release:PullRespond.communication)
  if (_internal_has_communication()) {
    clear_has_request_type();
      ::CommunicationRespond* temp = request_type_.communication_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.communication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CommunicationRespond& PullRespond::_internal_communication() const {
  return _internal_has_communication()
      ? *request_type_.communication_
      : *reinterpret_cast< ::CommunicationRespond*>(&::_CommunicationRespond_default_instance_);
}
inline const ::CommunicationRespond& PullRespond::communication() const {
  // @@protoc_insertion_point(field_get:PullRespond.communication)
  return _internal_communication();
}
inline ::CommunicationRespond* PullRespond::unsafe_arena_release_communication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.communication)
  if (_internal_has_communication()) {
    clear_has_request_type();
    ::CommunicationRespond* temp = request_type_.communication_;
    request_type_.communication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_communication(::CommunicationRespond* communication) {
  clear_request_type();
  if (communication) {
    set_has_communication();
    request_type_.communication_ = communication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.communication)
}
inline ::CommunicationRespond* PullRespond::_internal_mutable_communication() {
  if (!_internal_has_communication()) {
    clear_request_type();
    set_has_communication();
    request_type_.communication_ = CreateMaybeMessage< ::CommunicationRespond >(GetArena());
  }
  return request_type_.communication_;
}
inline ::CommunicationRespond* PullRespond::mutable_communication() {
  // @@protoc_insertion_point(field_mutable:PullRespond.communication)
  return _internal_mutable_communication();
}

// .offlineMsgRespond offline_respond = 11;
inline bool PullRespond::_internal_has_offline_respond() const {
  return request_type_case() == kOfflineRespond;
}
inline bool PullRespond::has_offline_respond() const {
  return _internal_has_offline_respond();
}
inline void PullRespond::set_has_offline_respond() {
  _oneof_case_[0] = kOfflineRespond;
}
inline void PullRespond::clear_offline_respond() {
  if (_internal_has_offline_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.offline_respond_;
    }
    clear_has_request_type();
  }
}
inline ::offlineMsgRespond* PullRespond::release_offline_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.offline_respond)
  if (_internal_has_offline_respond()) {
    clear_has_request_type();
      ::offlineMsgRespond* temp = request_type_.offline_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.offline_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::offlineMsgRespond& PullRespond::_internal_offline_respond() const {
  return _internal_has_offline_respond()
      ? *request_type_.offline_respond_
      : *reinterpret_cast< ::offlineMsgRespond*>(&::_offlineMsgRespond_default_instance_);
}
inline const ::offlineMsgRespond& PullRespond::offline_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.offline_respond)
  return _internal_offline_respond();
}
inline ::offlineMsgRespond* PullRespond::unsafe_arena_release_offline_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.offline_respond)
  if (_internal_has_offline_respond()) {
    clear_has_request_type();
    ::offlineMsgRespond* temp = request_type_.offline_respond_;
    request_type_.offline_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_offline_respond(::offlineMsgRespond* offline_respond) {
  clear_request_type();
  if (offline_respond) {
    set_has_offline_respond();
    request_type_.offline_respond_ = offline_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.offline_respond)
}
inline ::offlineMsgRespond* PullRespond::_internal_mutable_offline_respond() {
  if (!_internal_has_offline_respond()) {
    clear_request_type();
    set_has_offline_respond();
    request_type_.offline_respond_ = CreateMaybeMessage< ::offlineMsgRespond >(GetArena());
  }
  return request_type_.offline_respond_;
}
inline ::offlineMsgRespond* PullRespond::mutable_offline_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.offline_respond)
  return _internal_mutable_offline_respond();
}

// .GetImageRespond image_respond = 12;
inline bool PullRespond::_internal_has_image_respond() const {
  return request_type_case() == kImageRespond;
}
inline bool PullRespond::has_image_respond() const {
  return _internal_has_image_respond();
}
inline void PullRespond::set_has_image_respond() {
  _oneof_case_[0] = kImageRespond;
}
inline void PullRespond::clear_image_respond() {
  if (_internal_has_image_respond()) {
    if (GetArena() == nullptr) {
      delete request_type_.image_respond_;
    }
    clear_has_request_type();
  }
}
inline ::GetImageRespond* PullRespond::release_image_respond() {
  // @@protoc_insertion_point(field_release:PullRespond.image_respond)
  if (_internal_has_image_respond()) {
    clear_has_request_type();
      ::GetImageRespond* temp = request_type_.image_respond_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.image_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GetImageRespond& PullRespond::_internal_image_respond() const {
  return _internal_has_image_respond()
      ? *request_type_.image_respond_
      : *reinterpret_cast< ::GetImageRespond*>(&::_GetImageRespond_default_instance_);
}
inline const ::GetImageRespond& PullRespond::image_respond() const {
  // @@protoc_insertion_point(field_get:PullRespond.image_respond)
  return _internal_image_respond();
}
inline ::GetImageRespond* PullRespond::unsafe_arena_release_image_respond() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.image_respond)
  if (_internal_has_image_respond()) {
    clear_has_request_type();
    ::GetImageRespond* temp = request_type_.image_respond_;
    request_type_.image_respond_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_image_respond(::GetImageRespond* image_respond) {
  clear_request_type();
  if (image_respond) {
    set_has_image_respond();
    request_type_.image_respond_ = image_respond;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.image_respond)
}
inline ::GetImageRespond* PullRespond::_internal_mutable_image_respond() {
  if (!_internal_has_image_respond()) {
    clear_request_type();
    set_has_image_respond();
    request_type_.image_respond_ = CreateMaybeMessage< ::GetImageRespond >(GetArena());
  }
  return request_type_.image_respond_;
}
inline ::GetImageRespond* PullRespond::mutable_image_respond() {
  // @@protoc_insertion_point(field_mutable:PullRespond.image_respond)
  return _internal_mutable_image_respond();
}

// .addImageRespond add_image = 13;
inline bool PullRespond::_internal_has_add_image() const {
  return request_type_case() == kAddImage;
}
inline bool PullRespond::has_add_image() const {
  return _internal_has_add_image();
}
inline void PullRespond::set_has_add_image() {
  _oneof_case_[0] = kAddImage;
}
inline void PullRespond::clear_add_image() {
  if (_internal_has_add_image()) {
    if (GetArena() == nullptr) {
      delete request_type_.add_image_;
    }
    clear_has_request_type();
  }
}
inline ::addImageRespond* PullRespond::release_add_image() {
  // @@protoc_insertion_point(field_release:PullRespond.add_image)
  if (_internal_has_add_image()) {
    clear_has_request_type();
      ::addImageRespond* temp = request_type_.add_image_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.add_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::addImageRespond& PullRespond::_internal_add_image() const {
  return _internal_has_add_image()
      ? *request_type_.add_image_
      : *reinterpret_cast< ::addImageRespond*>(&::_addImageRespond_default_instance_);
}
inline const ::addImageRespond& PullRespond::add_image() const {
  // @@protoc_insertion_point(field_get:PullRespond.add_image)
  return _internal_add_image();
}
inline ::addImageRespond* PullRespond::unsafe_arena_release_add_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.add_image)
  if (_internal_has_add_image()) {
    clear_has_request_type();
    ::addImageRespond* temp = request_type_.add_image_;
    request_type_.add_image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_add_image(::addImageRespond* add_image) {
  clear_request_type();
  if (add_image) {
    set_has_add_image();
    request_type_.add_image_ = add_image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.add_image)
}
inline ::addImageRespond* PullRespond::_internal_mutable_add_image() {
  if (!_internal_has_add_image()) {
    clear_request_type();
    set_has_add_image();
    request_type_.add_image_ = CreateMaybeMessage< ::addImageRespond >(GetArena());
  }
  return request_type_.add_image_;
}
inline ::addImageRespond* PullRespond::mutable_add_image() {
  // @@protoc_insertion_point(field_mutable:PullRespond.add_image)
  return _internal_mutable_add_image();
}

// .deleteFriendRespond delete_friend = 14;
inline bool PullRespond::_internal_has_delete_friend() const {
  return request_type_case() == kDeleteFriend;
}
inline bool PullRespond::has_delete_friend() const {
  return _internal_has_delete_friend();
}
inline void PullRespond::set_has_delete_friend() {
  _oneof_case_[0] = kDeleteFriend;
}
inline void PullRespond::clear_delete_friend() {
  if (_internal_has_delete_friend()) {
    if (GetArena() == nullptr) {
      delete request_type_.delete_friend_;
    }
    clear_has_request_type();
  }
}
inline ::deleteFriendRespond* PullRespond::release_delete_friend() {
  // @@protoc_insertion_point(field_release:PullRespond.delete_friend)
  if (_internal_has_delete_friend()) {
    clear_has_request_type();
      ::deleteFriendRespond* temp = request_type_.delete_friend_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_type_.delete_friend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::deleteFriendRespond& PullRespond::_internal_delete_friend() const {
  return _internal_has_delete_friend()
      ? *request_type_.delete_friend_
      : *reinterpret_cast< ::deleteFriendRespond*>(&::_deleteFriendRespond_default_instance_);
}
inline const ::deleteFriendRespond& PullRespond::delete_friend() const {
  // @@protoc_insertion_point(field_get:PullRespond.delete_friend)
  return _internal_delete_friend();
}
inline ::deleteFriendRespond* PullRespond::unsafe_arena_release_delete_friend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PullRespond.delete_friend)
  if (_internal_has_delete_friend()) {
    clear_has_request_type();
    ::deleteFriendRespond* temp = request_type_.delete_friend_;
    request_type_.delete_friend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PullRespond::unsafe_arena_set_allocated_delete_friend(::deleteFriendRespond* delete_friend) {
  clear_request_type();
  if (delete_friend) {
    set_has_delete_friend();
    request_type_.delete_friend_ = delete_friend;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PullRespond.delete_friend)
}
inline ::deleteFriendRespond* PullRespond::_internal_mutable_delete_friend() {
  if (!_internal_has_delete_friend()) {
    clear_request_type();
    set_has_delete_friend();
    request_type_.delete_friend_ = CreateMaybeMessage< ::deleteFriendRespond >(GetArena());
  }
  return request_type_.delete_friend_;
}
inline ::deleteFriendRespond* PullRespond::mutable_delete_friend() {
  // @@protoc_insertion_point(field_mutable:PullRespond.delete_friend)
  return _internal_mutable_delete_friend();
}

inline bool PullRespond::has_request_type() const {
  return request_type_case() != REQUEST_TYPE_NOT_SET;
}
inline void PullRespond::clear_has_request_type() {
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}
inline PullRespond::RequestTypeCase PullRespond::request_type_case() const {
  return PullRespond::RequestTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateImaRequest

// string user_id = 1;
inline void UpdateImaRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateImaRequest::user_id() const {
  // @@protoc_insertion_point(field_get:UpdateImaRequest.user_id)
  return _internal_user_id();
}
inline void UpdateImaRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:UpdateImaRequest.user_id)
}
inline std::string* UpdateImaRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:UpdateImaRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UpdateImaRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void UpdateImaRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateImaRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateImaRequest.user_id)
}
inline void UpdateImaRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateImaRequest.user_id)
}
inline void UpdateImaRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateImaRequest.user_id)
}
inline std::string* UpdateImaRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateImaRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:UpdateImaRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateImaRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateImaRequest.user_id)
}
inline std::string* UpdateImaRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateImaRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateImaRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateImaRequest.user_id)
}

// bytes img_date = 2;
inline void UpdateImaRequest::clear_img_date() {
  img_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateImaRequest::img_date() const {
  // @@protoc_insertion_point(field_get:UpdateImaRequest.img_date)
  return _internal_img_date();
}
inline void UpdateImaRequest::set_img_date(const std::string& value) {
  _internal_set_img_date(value);
  // @@protoc_insertion_point(field_set:UpdateImaRequest.img_date)
}
inline std::string* UpdateImaRequest::mutable_img_date() {
  // @@protoc_insertion_point(field_mutable:UpdateImaRequest.img_date)
  return _internal_mutable_img_date();
}
inline const std::string& UpdateImaRequest::_internal_img_date() const {
  return img_date_.Get();
}
inline void UpdateImaRequest::_internal_set_img_date(const std::string& value) {
  
  img_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateImaRequest::set_img_date(std::string&& value) {
  
  img_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateImaRequest.img_date)
}
inline void UpdateImaRequest::set_img_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  img_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateImaRequest.img_date)
}
inline void UpdateImaRequest::set_img_date(const void* value,
    size_t size) {
  
  img_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateImaRequest.img_date)
}
inline std::string* UpdateImaRequest::_internal_mutable_img_date() {
  
  return img_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateImaRequest::release_img_date() {
  // @@protoc_insertion_point(field_release:UpdateImaRequest.img_date)
  return img_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateImaRequest::set_allocated_img_date(std::string* img_date) {
  if (img_date != nullptr) {
    
  } else {
    
  }
  img_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateImaRequest.img_date)
}
inline std::string* UpdateImaRequest::unsafe_arena_release_img_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateImaRequest.img_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return img_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateImaRequest::unsafe_arena_set_allocated_img_date(
    std::string* img_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (img_date != nullptr) {
    
  } else {
    
  }
  img_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      img_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateImaRequest.img_date)
}

// -------------------------------------------------------------------

// UpdateImaRespond

// bool success = 1;
inline void UpdateImaRespond::clear_success() {
  success_ = false;
}
inline bool UpdateImaRespond::_internal_success() const {
  return success_;
}
inline bool UpdateImaRespond::success() const {
  // @@protoc_insertion_point(field_get:UpdateImaRespond.success)
  return _internal_success();
}
inline void UpdateImaRespond::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UpdateImaRespond::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:UpdateImaRespond.success)
}

// string msg = 2;
inline void UpdateImaRespond::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateImaRespond::msg() const {
  // @@protoc_insertion_point(field_get:UpdateImaRespond.msg)
  return _internal_msg();
}
inline void UpdateImaRespond::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:UpdateImaRespond.msg)
}
inline std::string* UpdateImaRespond::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:UpdateImaRespond.msg)
  return _internal_mutable_msg();
}
inline const std::string& UpdateImaRespond::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateImaRespond::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateImaRespond::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:UpdateImaRespond.msg)
}
inline void UpdateImaRespond::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:UpdateImaRespond.msg)
}
inline void UpdateImaRespond::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:UpdateImaRespond.msg)
}
inline std::string* UpdateImaRespond::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateImaRespond::release_msg() {
  // @@protoc_insertion_point(field_release:UpdateImaRespond.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateImaRespond::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:UpdateImaRespond.msg)
}
inline std::string* UpdateImaRespond::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:UpdateImaRespond.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateImaRespond::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UpdateImaRespond.msg)
}

// -------------------------------------------------------------------

// offlineMsgRequest

// string user_id = 1;
inline void offlineMsgRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& offlineMsgRequest::user_id() const {
  // @@protoc_insertion_point(field_get:offlineMsgRequest.user_id)
  return _internal_user_id();
}
inline void offlineMsgRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:offlineMsgRequest.user_id)
}
inline std::string* offlineMsgRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:offlineMsgRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& offlineMsgRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void offlineMsgRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void offlineMsgRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:offlineMsgRequest.user_id)
}
inline void offlineMsgRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:offlineMsgRequest.user_id)
}
inline void offlineMsgRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:offlineMsgRequest.user_id)
}
inline std::string* offlineMsgRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* offlineMsgRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:offlineMsgRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void offlineMsgRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:offlineMsgRequest.user_id)
}
inline std::string* offlineMsgRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:offlineMsgRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void offlineMsgRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:offlineMsgRequest.user_id)
}

// -------------------------------------------------------------------

// offlineMsgRespond

// repeated .offline_info info = 1;
inline int offlineMsgRespond::_internal_info_size() const {
  return info_.size();
}
inline int offlineMsgRespond::info_size() const {
  return _internal_info_size();
}
inline void offlineMsgRespond::clear_info() {
  info_.Clear();
}
inline ::offline_info* offlineMsgRespond::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:offlineMsgRespond.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_info >*
offlineMsgRespond::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:offlineMsgRespond.info)
  return &info_;
}
inline const ::offline_info& offlineMsgRespond::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::offline_info& offlineMsgRespond::info(int index) const {
  // @@protoc_insertion_point(field_get:offlineMsgRespond.info)
  return _internal_info(index);
}
inline ::offline_info* offlineMsgRespond::_internal_add_info() {
  return info_.Add();
}
inline ::offline_info* offlineMsgRespond::add_info() {
  // @@protoc_insertion_point(field_add:offlineMsgRespond.info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_info >&
offlineMsgRespond::info() const {
  // @@protoc_insertion_point(field_list:offlineMsgRespond.info)
  return info_;
}

// -------------------------------------------------------------------

// offline_info

// string message_id = 1;
inline void offline_info::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& offline_info::message_id() const {
  // @@protoc_insertion_point(field_get:offline_info.message_id)
  return _internal_message_id();
}
inline void offline_info::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:offline_info.message_id)
}
inline std::string* offline_info::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:offline_info.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& offline_info::_internal_message_id() const {
  return message_id_.Get();
}
inline void offline_info::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void offline_info::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:offline_info.message_id)
}
inline void offline_info::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:offline_info.message_id)
}
inline void offline_info::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:offline_info.message_id)
}
inline std::string* offline_info::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* offline_info::release_message_id() {
  // @@protoc_insertion_point(field_release:offline_info.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void offline_info::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:offline_info.message_id)
}
inline std::string* offline_info::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:offline_info.message_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void offline_info::unsafe_arena_set_allocated_message_id(
    std::string* message_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:offline_info.message_id)
}

// bytes message = 2;
inline void offline_info::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& offline_info::message() const {
  // @@protoc_insertion_point(field_get:offline_info.message)
  return _internal_message();
}
inline void offline_info::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:offline_info.message)
}
inline std::string* offline_info::mutable_message() {
  // @@protoc_insertion_point(field_mutable:offline_info.message)
  return _internal_mutable_message();
}
inline const std::string& offline_info::_internal_message() const {
  return message_.Get();
}
inline void offline_info::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void offline_info::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:offline_info.message)
}
inline void offline_info::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:offline_info.message)
}
inline void offline_info::set_message(const void* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:offline_info.message)
}
inline std::string* offline_info::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* offline_info::release_message() {
  // @@protoc_insertion_point(field_release:offline_info.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void offline_info::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:offline_info.message)
}
inline std::string* offline_info::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:offline_info.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void offline_info::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:offline_info.message)
}

// string timeStemp = 3;
inline void offline_info::clear_timestemp() {
  timestemp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& offline_info::timestemp() const {
  // @@protoc_insertion_point(field_get:offline_info.timeStemp)
  return _internal_timestemp();
}
inline void offline_info::set_timestemp(const std::string& value) {
  _internal_set_timestemp(value);
  // @@protoc_insertion_point(field_set:offline_info.timeStemp)
}
inline std::string* offline_info::mutable_timestemp() {
  // @@protoc_insertion_point(field_mutable:offline_info.timeStemp)
  return _internal_mutable_timestemp();
}
inline const std::string& offline_info::_internal_timestemp() const {
  return timestemp_.Get();
}
inline void offline_info::_internal_set_timestemp(const std::string& value) {
  
  timestemp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void offline_info::set_timestemp(std::string&& value) {
  
  timestemp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:offline_info.timeStemp)
}
inline void offline_info::set_timestemp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestemp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:offline_info.timeStemp)
}
inline void offline_info::set_timestemp(const char* value,
    size_t size) {
  
  timestemp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:offline_info.timeStemp)
}
inline std::string* offline_info::_internal_mutable_timestemp() {
  
  return timestemp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* offline_info::release_timestemp() {
  // @@protoc_insertion_point(field_release:offline_info.timeStemp)
  return timestemp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void offline_info::set_allocated_timestemp(std::string* timestemp) {
  if (timestemp != nullptr) {
    
  } else {
    
  }
  timestemp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestemp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:offline_info.timeStemp)
}
inline std::string* offline_info::unsafe_arena_release_timestemp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:offline_info.timeStemp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return timestemp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void offline_info::unsafe_arena_set_allocated_timestemp(
    std::string* timestemp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timestemp != nullptr) {
    
  } else {
    
  }
  timestemp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timestemp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:offline_info.timeStemp)
}

// string friend_id = 4;
inline void offline_info::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& offline_info::friend_id() const {
  // @@protoc_insertion_point(field_get:offline_info.friend_id)
  return _internal_friend_id();
}
inline void offline_info::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:offline_info.friend_id)
}
inline std::string* offline_info::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:offline_info.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& offline_info::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void offline_info::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void offline_info::set_friend_id(std::string&& value) {
  
  friend_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:offline_info.friend_id)
}
inline void offline_info::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:offline_info.friend_id)
}
inline void offline_info::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:offline_info.friend_id)
}
inline std::string* offline_info::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* offline_info::release_friend_id() {
  // @@protoc_insertion_point(field_release:offline_info.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void offline_info::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:offline_info.friend_id)
}
inline std::string* offline_info::unsafe_arena_release_friend_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:offline_info.friend_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return friend_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void offline_info::unsafe_arena_set_allocated_friend_id(
    std::string* friend_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      friend_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:offline_info.friend_id)
}

// int32 msg_type = 5;
inline void offline_info::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offline_info::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 offline_info::msg_type() const {
  // @@protoc_insertion_point(field_get:offline_info.msg_type)
  return _internal_msg_type();
}
inline void offline_info::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
}
inline void offline_info::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:offline_info.msg_type)
}

// string md5 = 6;
inline void offline_info::clear_md5() {
  md5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& offline_info::md5() const {
  // @@protoc_insertion_point(field_get:offline_info.md5)
  return _internal_md5();
}
inline void offline_info::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:offline_info.md5)
}
inline std::string* offline_info::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:offline_info.md5)
  return _internal_mutable_md5();
}
inline const std::string& offline_info::_internal_md5() const {
  return md5_.Get();
}
inline void offline_info::_internal_set_md5(const std::string& value) {
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void offline_info::set_md5(std::string&& value) {
  
  md5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:offline_info.md5)
}
inline void offline_info::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:offline_info.md5)
}
inline void offline_info::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:offline_info.md5)
}
inline std::string* offline_info::_internal_mutable_md5() {
  
  return md5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* offline_info::release_md5() {
  // @@protoc_insertion_point(field_release:offline_info.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void offline_info::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:offline_info.md5)
}
inline std::string* offline_info::unsafe_arena_release_md5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:offline_info.md5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return md5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void offline_info::unsafe_arena_set_allocated_md5(
    std::string* md5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      md5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:offline_info.md5)
}

// -------------------------------------------------------------------

// ServerMsg

// .friendAdd friend_add = 1;
inline bool ServerMsg::_internal_has_friend_add() const {
  return msg_type_case() == kFriendAdd;
}
inline bool ServerMsg::has_friend_add() const {
  return _internal_has_friend_add();
}
inline void ServerMsg::set_has_friend_add() {
  _oneof_case_[0] = kFriendAdd;
}
inline void ServerMsg::clear_friend_add() {
  if (_internal_has_friend_add()) {
    if (GetArena() == nullptr) {
      delete msg_type_.friend_add_;
    }
    clear_has_msg_type();
  }
}
inline ::friendAdd* ServerMsg::release_friend_add() {
  // @@protoc_insertion_point(field_release:ServerMsg.friend_add)
  if (_internal_has_friend_add()) {
    clear_has_msg_type();
      ::friendAdd* temp = msg_type_.friend_add_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_type_.friend_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::friendAdd& ServerMsg::_internal_friend_add() const {
  return _internal_has_friend_add()
      ? *msg_type_.friend_add_
      : *reinterpret_cast< ::friendAdd*>(&::_friendAdd_default_instance_);
}
inline const ::friendAdd& ServerMsg::friend_add() const {
  // @@protoc_insertion_point(field_get:ServerMsg.friend_add)
  return _internal_friend_add();
}
inline ::friendAdd* ServerMsg::unsafe_arena_release_friend_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerMsg.friend_add)
  if (_internal_has_friend_add()) {
    clear_has_msg_type();
    ::friendAdd* temp = msg_type_.friend_add_;
    msg_type_.friend_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMsg::unsafe_arena_set_allocated_friend_add(::friendAdd* friend_add) {
  clear_msg_type();
  if (friend_add) {
    set_has_friend_add();
    msg_type_.friend_add_ = friend_add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerMsg.friend_add)
}
inline ::friendAdd* ServerMsg::_internal_mutable_friend_add() {
  if (!_internal_has_friend_add()) {
    clear_msg_type();
    set_has_friend_add();
    msg_type_.friend_add_ = CreateMaybeMessage< ::friendAdd >(GetArena());
  }
  return msg_type_.friend_add_;
}
inline ::friendAdd* ServerMsg::mutable_friend_add() {
  // @@protoc_insertion_point(field_mutable:ServerMsg.friend_add)
  return _internal_mutable_friend_add();
}

// .CommunicationRequest communication = 2;
inline bool ServerMsg::_internal_has_communication() const {
  return msg_type_case() == kCommunication;
}
inline bool ServerMsg::has_communication() const {
  return _internal_has_communication();
}
inline void ServerMsg::set_has_communication() {
  _oneof_case_[0] = kCommunication;
}
inline void ServerMsg::clear_communication() {
  if (_internal_has_communication()) {
    if (GetArena() == nullptr) {
      delete msg_type_.communication_;
    }
    clear_has_msg_type();
  }
}
inline ::CommunicationRequest* ServerMsg::release_communication() {
  // @@protoc_insertion_point(field_release:ServerMsg.communication)
  if (_internal_has_communication()) {
    clear_has_msg_type();
      ::CommunicationRequest* temp = msg_type_.communication_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_type_.communication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CommunicationRequest& ServerMsg::_internal_communication() const {
  return _internal_has_communication()
      ? *msg_type_.communication_
      : *reinterpret_cast< ::CommunicationRequest*>(&::_CommunicationRequest_default_instance_);
}
inline const ::CommunicationRequest& ServerMsg::communication() const {
  // @@protoc_insertion_point(field_get:ServerMsg.communication)
  return _internal_communication();
}
inline ::CommunicationRequest* ServerMsg::unsafe_arena_release_communication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerMsg.communication)
  if (_internal_has_communication()) {
    clear_has_msg_type();
    ::CommunicationRequest* temp = msg_type_.communication_;
    msg_type_.communication_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMsg::unsafe_arena_set_allocated_communication(::CommunicationRequest* communication) {
  clear_msg_type();
  if (communication) {
    set_has_communication();
    msg_type_.communication_ = communication;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerMsg.communication)
}
inline ::CommunicationRequest* ServerMsg::_internal_mutable_communication() {
  if (!_internal_has_communication()) {
    clear_msg_type();
    set_has_communication();
    msg_type_.communication_ = CreateMaybeMessage< ::CommunicationRequest >(GetArena());
  }
  return msg_type_.communication_;
}
inline ::CommunicationRequest* ServerMsg::mutable_communication() {
  // @@protoc_insertion_point(field_mutable:ServerMsg.communication)
  return _internal_mutable_communication();
}

// .heartCheck heart = 3;
inline bool ServerMsg::_internal_has_heart() const {
  return msg_type_case() == kHeart;
}
inline bool ServerMsg::has_heart() const {
  return _internal_has_heart();
}
inline void ServerMsg::set_has_heart() {
  _oneof_case_[0] = kHeart;
}
inline void ServerMsg::clear_heart() {
  if (_internal_has_heart()) {
    if (GetArena() == nullptr) {
      delete msg_type_.heart_;
    }
    clear_has_msg_type();
  }
}
inline ::heartCheck* ServerMsg::release_heart() {
  // @@protoc_insertion_point(field_release:ServerMsg.heart)
  if (_internal_has_heart()) {
    clear_has_msg_type();
      ::heartCheck* temp = msg_type_.heart_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_type_.heart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::heartCheck& ServerMsg::_internal_heart() const {
  return _internal_has_heart()
      ? *msg_type_.heart_
      : *reinterpret_cast< ::heartCheck*>(&::_heartCheck_default_instance_);
}
inline const ::heartCheck& ServerMsg::heart() const {
  // @@protoc_insertion_point(field_get:ServerMsg.heart)
  return _internal_heart();
}
inline ::heartCheck* ServerMsg::unsafe_arena_release_heart() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServerMsg.heart)
  if (_internal_has_heart()) {
    clear_has_msg_type();
    ::heartCheck* temp = msg_type_.heart_;
    msg_type_.heart_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMsg::unsafe_arena_set_allocated_heart(::heartCheck* heart) {
  clear_msg_type();
  if (heart) {
    set_has_heart();
    msg_type_.heart_ = heart;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerMsg.heart)
}
inline ::heartCheck* ServerMsg::_internal_mutable_heart() {
  if (!_internal_has_heart()) {
    clear_msg_type();
    set_has_heart();
    msg_type_.heart_ = CreateMaybeMessage< ::heartCheck >(GetArena());
  }
  return msg_type_.heart_;
}
inline ::heartCheck* ServerMsg::mutable_heart() {
  // @@protoc_insertion_point(field_mutable:ServerMsg.heart)
  return _internal_mutable_heart();
}

inline bool ServerMsg::has_msg_type() const {
  return msg_type_case() != MSG_TYPE_NOT_SET;
}
inline void ServerMsg::clear_has_msg_type() {
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}
inline ServerMsg::MsgTypeCase ServerMsg::msg_type_case() const {
  return ServerMsg::MsgTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// heartCheck

// -------------------------------------------------------------------

// friendAdd

// string user_id = 1;
inline void friendAdd::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& friendAdd::user_id() const {
  // @@protoc_insertion_point(field_get:friendAdd.user_id)
  return _internal_user_id();
}
inline void friendAdd::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:friendAdd.user_id)
}
inline std::string* friendAdd::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:friendAdd.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& friendAdd::_internal_user_id() const {
  return user_id_.Get();
}
inline void friendAdd::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void friendAdd::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:friendAdd.user_id)
}
inline void friendAdd::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:friendAdd.user_id)
}
inline void friendAdd::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:friendAdd.user_id)
}
inline std::string* friendAdd::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* friendAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:friendAdd.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void friendAdd::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:friendAdd.user_id)
}
inline std::string* friendAdd::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:friendAdd.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void friendAdd::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:friendAdd.user_id)
}

// -------------------------------------------------------------------

// CommunicationRequest

// string user_id = 1;
inline void CommunicationRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommunicationRequest::user_id() const {
  // @@protoc_insertion_point(field_get:CommunicationRequest.user_id)
  return _internal_user_id();
}
inline void CommunicationRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:CommunicationRequest.user_id)
}
inline std::string* CommunicationRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:CommunicationRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& CommunicationRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void CommunicationRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommunicationRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommunicationRequest.user_id)
}
inline void CommunicationRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CommunicationRequest.user_id)
}
inline void CommunicationRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommunicationRequest.user_id)
}
inline std::string* CommunicationRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommunicationRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:CommunicationRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommunicationRequest.user_id)
}
inline std::string* CommunicationRequest::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommunicationRequest.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommunicationRequest::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommunicationRequest.user_id)
}

// string target_id = 2;
inline void CommunicationRequest::clear_target_id() {
  target_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommunicationRequest::target_id() const {
  // @@protoc_insertion_point(field_get:CommunicationRequest.target_id)
  return _internal_target_id();
}
inline void CommunicationRequest::set_target_id(const std::string& value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:CommunicationRequest.target_id)
}
inline std::string* CommunicationRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:CommunicationRequest.target_id)
  return _internal_mutable_target_id();
}
inline const std::string& CommunicationRequest::_internal_target_id() const {
  return target_id_.Get();
}
inline void CommunicationRequest::_internal_set_target_id(const std::string& value) {
  
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommunicationRequest::set_target_id(std::string&& value) {
  
  target_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommunicationRequest.target_id)
}
inline void CommunicationRequest::set_target_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CommunicationRequest.target_id)
}
inline void CommunicationRequest::set_target_id(const char* value,
    size_t size) {
  
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommunicationRequest.target_id)
}
inline std::string* CommunicationRequest::_internal_mutable_target_id() {
  
  return target_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommunicationRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:CommunicationRequest.target_id)
  return target_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationRequest::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
    
  } else {
    
  }
  target_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommunicationRequest.target_id)
}
inline std::string* CommunicationRequest::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommunicationRequest.target_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommunicationRequest::unsafe_arena_set_allocated_target_id(
    std::string* target_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_id != nullptr) {
    
  } else {
    
  }
  target_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommunicationRequest.target_id)
}

// bytes content = 3;
inline void CommunicationRequest::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommunicationRequest::content() const {
  // @@protoc_insertion_point(field_get:CommunicationRequest.content)
  return _internal_content();
}
inline void CommunicationRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:CommunicationRequest.content)
}
inline std::string* CommunicationRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:CommunicationRequest.content)
  return _internal_mutable_content();
}
inline const std::string& CommunicationRequest::_internal_content() const {
  return content_.Get();
}
inline void CommunicationRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommunicationRequest::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommunicationRequest.content)
}
inline void CommunicationRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CommunicationRequest.content)
}
inline void CommunicationRequest::set_content(const void* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommunicationRequest.content)
}
inline std::string* CommunicationRequest::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommunicationRequest::release_content() {
  // @@protoc_insertion_point(field_release:CommunicationRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommunicationRequest.content)
}
inline std::string* CommunicationRequest::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommunicationRequest.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommunicationRequest::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommunicationRequest.content)
}

// string message_id = 4;
inline void CommunicationRequest::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommunicationRequest::message_id() const {
  // @@protoc_insertion_point(field_get:CommunicationRequest.message_id)
  return _internal_message_id();
}
inline void CommunicationRequest::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:CommunicationRequest.message_id)
}
inline std::string* CommunicationRequest::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:CommunicationRequest.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& CommunicationRequest::_internal_message_id() const {
  return message_id_.Get();
}
inline void CommunicationRequest::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommunicationRequest::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommunicationRequest.message_id)
}
inline void CommunicationRequest::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CommunicationRequest.message_id)
}
inline void CommunicationRequest::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommunicationRequest.message_id)
}
inline std::string* CommunicationRequest::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommunicationRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:CommunicationRequest.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationRequest::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommunicationRequest.message_id)
}
inline std::string* CommunicationRequest::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommunicationRequest.message_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommunicationRequest::unsafe_arena_set_allocated_message_id(
    std::string* message_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommunicationRequest.message_id)
}

// int32 msg_type = 5;
inline void CommunicationRequest::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRequest::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationRequest::msg_type() const {
  // @@protoc_insertion_point(field_get:CommunicationRequest.msg_type)
  return _internal_msg_type();
}
inline void CommunicationRequest::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
}
inline void CommunicationRequest::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CommunicationRequest.msg_type)
}

// string md5 = 6;
inline void CommunicationRequest::clear_md5() {
  md5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommunicationRequest::md5() const {
  // @@protoc_insertion_point(field_get:CommunicationRequest.md5)
  return _internal_md5();
}
inline void CommunicationRequest::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:CommunicationRequest.md5)
}
inline std::string* CommunicationRequest::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:CommunicationRequest.md5)
  return _internal_mutable_md5();
}
inline const std::string& CommunicationRequest::_internal_md5() const {
  return md5_.Get();
}
inline void CommunicationRequest::_internal_set_md5(const std::string& value) {
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommunicationRequest::set_md5(std::string&& value) {
  
  md5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommunicationRequest.md5)
}
inline void CommunicationRequest::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CommunicationRequest.md5)
}
inline void CommunicationRequest::set_md5(const char* value,
    size_t size) {
  
  md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommunicationRequest.md5)
}
inline std::string* CommunicationRequest::_internal_mutable_md5() {
  
  return md5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommunicationRequest::release_md5() {
  // @@protoc_insertion_point(field_release:CommunicationRequest.md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationRequest::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommunicationRequest.md5)
}
inline std::string* CommunicationRequest::unsafe_arena_release_md5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommunicationRequest.md5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return md5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommunicationRequest::unsafe_arena_set_allocated_md5(
    std::string* md5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      md5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommunicationRequest.md5)
}

// -------------------------------------------------------------------

// CommunicationRespond

// string message_id = 1;
inline void CommunicationRespond::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommunicationRespond::message_id() const {
  // @@protoc_insertion_point(field_get:CommunicationRespond.message_id)
  return _internal_message_id();
}
inline void CommunicationRespond::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:CommunicationRespond.message_id)
}
inline std::string* CommunicationRespond::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:CommunicationRespond.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& CommunicationRespond::_internal_message_id() const {
  return message_id_.Get();
}
inline void CommunicationRespond::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommunicationRespond::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CommunicationRespond.message_id)
}
inline void CommunicationRespond::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CommunicationRespond.message_id)
}
inline void CommunicationRespond::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CommunicationRespond.message_id)
}
inline std::string* CommunicationRespond::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommunicationRespond::release_message_id() {
  // @@protoc_insertion_point(field_release:CommunicationRespond.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommunicationRespond::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CommunicationRespond.message_id)
}
inline std::string* CommunicationRespond::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CommunicationRespond.message_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommunicationRespond::unsafe_arena_set_allocated_message_id(
    std::string* message_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommunicationRespond.message_id)
}

// bool result = 2;
inline void CommunicationRespond::clear_result() {
  result_ = false;
}
inline bool CommunicationRespond::_internal_result() const {
  return result_;
}
inline bool CommunicationRespond::result() const {
  // @@protoc_insertion_point(field_get:CommunicationRespond.result)
  return _internal_result();
}
inline void CommunicationRespond::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void CommunicationRespond::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CommunicationRespond.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SearchRequest_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SearchRequest_State>() {
  return ::SearchRequest_State_descriptor();
}
template <> struct is_proto_enum< ::SearchRequest_Way> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SearchRequest_Way>() {
  return ::SearchRequest_Way_descriptor();
}
template <> struct is_proto_enum< ::AddRequest_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AddRequest_State>() {
  return ::AddRequest_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_5flogin_2eproto
